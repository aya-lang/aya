package aya.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import aya.exceptions.SyntaxError;

public class CharacterParser {
	public static final String TAB_STR = "  ";
	public static final char INVALID = Character.MAX_VALUE;
	public static boolean mapExists = false;
	public static HashMap<String, Character> specialCharacters = new HashMap<String, Character>(); //Special Characters
	
	public static void add_char(String name, char c) {
		specialCharacters.put(name,c);
	}
	
	public static void add_char(String name, String codepoint) {
		add_char(name, getCharUni(codepoint));
	}
	
	/** return SUCCESS if successful, return error message if unsuccessful */
	public static String initMap() {
		if (mapExists) return "SUCCESS";
		
		
		add_char("in","2208"); //Ã¢Ë†Ë†
		add_char("ni","220b"); //Ã¢Ë†â€¹
		add_char("leq","2264"); //Ã¢â€°Â¤
		add_char("geq","2265"); //Ã¢â€°Â¥
		add_char("ll","226a"); //Ã¢â€°Âª
		add_char("gg","226b"); //Ã¢â€°Â«
		add_char("prec","227a"); //Ã¢â€°Âº
		add_char("succ","227b"); //Ã¢â€°Â»
		add_char("preceq","227c"); //Ã¢â€°Â¼
		add_char("succeq","227d"); //Ã¢â€°Â½
		add_char("sim","223c"); //Ã¢Ë†Â¼
		add_char("cong","2245"); //Ã¢â€°â€¦
		add_char("simeq","2243"); //Ã¢â€°Æ’
		add_char("approx","2248"); //Ã¢â€°Ë†
		add_char("equiv","2261"); //Ã¢â€°Â¡
		add_char("subset","2282"); //Ã¢Å â€š
		add_char("supset","2283"); //Ã¢Å Æ’
		add_char("subseteq","2286"); //Ã¢Å â€ 
		add_char("supseteq","2287"); //Ã¢Å â€¡
		add_char("sqsubseteq","2291"); //Ã¢Å â€˜
		add_char("sqsupseteq","2292"); //Ã¢Å â€™
		add_char("perp","22a5"); //Ã¢Å Â¥
		add_char("models","22a7"); //Ã¢Å Â§
		add_char("mid","2223"); //Ã¢Ë†Â£
		add_char("parallel","2225"); //Ã¢Ë†Â¥
		add_char("vdash","22a2"); //Ã¢Å Â¢
		add_char("vvdash","22a9"); //Ã¢Å Â©
		add_char("vddash","22a7"); //Ã¢Å Â§
		add_char("dashv","22a3"); //Ã¢Å Â£
		add_char("bowtie","22c8"); //Ã¢â€¹Ë†
		add_char("join","22c8"); //Ã¢â€¹Ë†
		add_char("pm","b1"); //Ã‚Â±
		add_char("mp","2213"); //Ã¢Ë†â€œ
		add_char("times","d7"); //Ãƒâ€”
		add_char("cdot","b7"); //Ã‚Â·
		add_char("circ","2218"); //Ã¢Ë†Ëœ
		add_char("bigcirc","25ef"); //Ã¢â€”Â¯
		add_char("div","f7"); //ÃƒÂ·
		add_char("diamond","22c4"); //Ã¢â€¹â€ž
		add_char("ast","2217"); //Ã¢Ë†â€”
		add_char("star","2606"); //Ã¢Ëœâ€ 
		add_char("cap","2229"); //Ã¢Ë†Â©
		add_char("cup","222a"); //Ã¢Ë†Âª
		add_char("sqcap","2293"); //Ã¢Å â€œ
		add_char("sqcup","2294"); //Ã¢Å â€?
		add_char("wedge","2227"); //Ã¢Ë†Â§
		add_char("vee","2228"); //Ã¢Ë†Â¨
		add_char("trileft","25c3"); //Ã¢â€”Æ’
		add_char("triright","25b9"); //Ã¢â€“Â¹
		add_char("bigtriup","25b3"); //Ã¢â€“Â³
		add_char("bigtridown","25bd"); //Ã¢â€“Â½
		add_char("oplus","2295"); //Ã¢Å â€¢
		add_char("ominus","2296"); //Ã¢Å â€“
		add_char("otimes","2297"); //Ã¢Å â€”
		add_char("oslash","2298"); //Ã¢Å Ëœ
		add_char("odot","2299"); //Ã¢Å â„¢
		add_char("bullet","2022"); //Ã¢â‚¬Â¢
		add_char("dagger","2020"); //Ã¢â‚¬Â 
		add_char("ddagger","2021"); //Ã¢â‚¬Â¡
		add_char("setminus","2216"); //Ã¢Ë†â€“
		add_char("uplus","228e"); //Ã¢Å Å½
		add_char("wr","2240"); //Ã¢â€°â‚¬
		add_char("amalg","2a3f"); //Ã¢Â¨Â¿
		add_char("lhd","22b2"); //Ã¢Å Â²
		add_char("rhd","22b3"); //Ã¢Å Â³
		add_char("unlhd","22b4"); //Ã¢Å Â´
		add_char("unrhd","22b5"); //Ã¢Å Âµ
		add_char("dotplus","2214"); //Ã¢Ë†â€?
		add_char("centerdot","22c5"); //Ã¢â€¹â€¦
		add_char("ltimes","22c9"); //Ã¢â€¹â€°
		add_char("rtimes","22ca"); //Ã¢â€¹Å 
		add_char("leftthreex","22cb"); //Ã¢â€¹â€¹
		add_char("rightthreex","22cc"); //Ã¢â€¹Å’
		add_char("circleddash","2296"); //Ã¢Å â€“
		add_char("ssminus","2216"); //Ã¢Ë†â€“
		add_char("barwedge","22bc"); //Ã¢Å Â¼
		add_char("curlyvee","22ce"); //Ã¢â€¹Å½
		add_char("veebar","22bb"); //Ã¢Å Â»
		add_char("intercal","22ba"); //Ã¢Å Âº
		add_char("cup","22d3"); //Ã¢â€¹â€œ
		add_char("cap","22d2"); //Ã¢â€¹â€™
		add_char("circledast","229b"); //Ã¢Å â€º
		add_char("circledcirc","229a"); //Ã¢Å Å¡
		add_char("boxminus","229f"); //Ã¢Å Å¸
		add_char("boxtimes","22a0"); //Ã¢Å Â 
		add_char("boxdot","22a1"); //Ã¢Å Â¡
		add_char("boxplus","229e"); //Ã¢Å Å¾
		add_char("dividetimes","22c7"); //Ã¢â€¹â€¡
		add_char("happy","263a"); //Ã¢ËœÂº
		add_char("invhappy","263b"); //Ã¢ËœÂ»
		add_char("heart","2665"); //Ã¢â„¢Â¥
		add_char("diamnd","2666"); //Ã¢â„¢Â¦
		add_char("club","2663"); //Ã¢â„¢Â£
		add_char("spade","2660"); //Ã¢â„¢Â 
		add_char("dot","2022"); //Ã¢â‚¬Â¢
		add_char("between","226c"); //Ã¢â€°Â¬
		add_char("pitchfork","22d4"); //Ã¢â€¹â€?
		add_char("backepsilon","3f6"); //Ã?Â¶
		add_char("blktrileft","25c2"); //Ã¢â€”â€š
		add_char("blktriright","25b8"); //Ã¢â€“Â¸
		add_char("therefore","2234"); //Ã¢Ë†Â´
		add_char("because","2235"); //Ã¢Ë†Âµ
		add_char("ne","2260"); //Ã¢â€°Â 
		add_char("alpha","3b1"); //ÃŽÂ±
		add_char("kappa","3ba"); //ÃŽÂº
		add_char("psi","3c8"); //Ã?Ë†
		add_char("ddelta","2206"); //Ã¢Ë†â€ 
		add_char("ttheta","398"); //ÃŽËœ
		add_char("beta","3b2"); //ÃŽÂ²
		add_char("lambda","3bb"); //ÃŽÂ»
		add_char("rho","3c1"); //Ã?ï¿½
		add_char("ggamma","393"); //ÃŽâ€œ
		add_char("uupsilon","3a5"); //ÃŽÂ¥
		add_char("chi","3c7"); //Ã?â€¡
		add_char("mu","3bc"); //ÃŽÂ¼
		add_char("sigma","3c3"); //Ã?Æ’
		add_char("llambda","39b"); //ÃŽâ€º
		add_char("xxi","39e"); //ÃŽÅ¾
		add_char("delta","3b4"); //ÃŽÂ´
		add_char("nu","3bd"); //ÃŽÂ½
		add_char("tau","3c4"); //Ã?â€ž
		add_char("oomega","2126"); //Ã¢â€žÂ¦
		add_char("theta","3b8"); //ÃŽÂ¸
		add_char("pphi","3a6"); //ÃŽÂ¦
		add_char("aleph","5d0"); //Ã—ï¿½
		add_char("eta","3b7"); //ÃŽÂ·
		add_char("omega","3c9"); //Ã?â€°
		add_char("upsilon","3c5"); //Ã?â€¦
		add_char("ppi","3a0"); //ÃŽÂ 
		add_char("gamma","3b3"); //ÃŽÂ³
		add_char("phi","3c6"); //Ã?â€ 
		add_char("xi","3be"); //ÃŽÂ¾
		add_char("ppsi","3a8"); //ÃŽÂ¨
		add_char("iota","3b9"); //ÃŽÂ¹
		add_char("pi","3c0"); //Ã?â‚¬
		add_char("zeta","3b6"); //ÃŽÂ¶
		add_char("ssigma","3a3"); //ÃŽÂ£
		add_char("gimel","5d2"); //Ã—â€™
		add_char("inf","221e"); //Ã¢Ë†Å¾
		add_char("forall","2200"); //Ã¢Ë†â‚¬
		add_char("wp","2118"); //Ã¢â€žËœ
		add_char("nabla","2207"); //Ã¢Ë†â€¡
		add_char("exists","2203"); //Ã¢Ë†Æ’
		add_char("angle","2220"); //Ã¢Ë†Â 
		add_char("partial","2202"); //Ã¢Ë†â€š
		add_char("eth","f0"); //ÃƒÂ°
		add_char("emptyset","2205"); //Ã¢Ë†â€¦
		add_char("para","b6"); //Ã‚Â¶
		add_char("fourth","bc"); //Ã‚Â¼
		add_char("half","bd"); //Ã‚Â½
		add_char("threefourths","be"); //Ã‚Â¾
		add_char("deg","b0"); //Ã‚Â°
		add_char("square","b2"); //Ã‚Â²
		add_char("cube","b3"); //Ã‚Â³
		add_char("block","2588"); //Ã¢â€“Ë†
		add_char("rarrow","21a6"); //Ã¢â€ Â¦
		add_char("larrow","21a4"); //Ã¢â€ Â¤
		add_char("plane","2708"); //Ã¢Å“Ë†
		add_char("cloud","2601"); //Ã¢Ëœï¿½
		add_char("umbrella","2602"); //Ã¢Ëœâ€š
		add_char("snowman","2603"); //Ã¢ËœÆ’
		add_char("comet","2604"); //Ã¢Ëœâ€ž
		add_char("fstar","2605"); //Ã¢Ëœâ€¦
		add_char("star","2606"); //Ã¢Ëœâ€ 
		add_char("bounce","2607"); //Ã¢Ëœâ€¡
		add_char("rabounce","2608"); //Ã¢ËœË†
		add_char("circdot","2609"); //Ã¢Ëœâ€°
		add_char("headphones","260a"); //Ã¢ËœÅ 
		add_char("iheadphones","260b"); //Ã¢Ëœâ€¹
		add_char("link","260c"); //Ã¢ËœÅ’
		add_char("handcuff","260d"); //Ã¢Ëœï¿½
		add_char("fphone","260e"); //Ã¢ËœÅ½
		add_char("phone","260f"); //Ã¢Ëœï¿½
		add_char("todo","2610"); //Ã¢Ëœï¿½
		add_char("todocheck","2611"); //Ã¢Ëœâ€˜
		add_char("todox","2612"); //Ã¢Ëœâ€™
		add_char("xx","2613"); //Ã¢Ëœâ€œ
		add_char("wetumbrella","2614"); //Ã¢Ëœâ€?
		add_char("java","2615"); //Ã¢Ëœâ€¢
		add_char("homeplate","2616"); //Ã¢Ëœâ€“
		add_char("fhomeplate","2617"); //Ã¢Ëœâ€”
		add_char("clover","2618"); //Ã¢ËœËœ
		add_char("parsnip","2619"); //Ã¢Ëœâ„¢
		add_char("fhandleft","261a"); //Ã¢ËœÅ¡
		add_char("fhandright","261b"); //Ã¢Ëœâ€º
		add_char("handleft","261c"); //Ã¢ËœÅ“
		add_char("handup","261d"); //Ã¢Ëœï¿½
		add_char("handright","261e"); //Ã¢ËœÅ¾
		add_char("handdown","261f"); //Ã¢ËœÅ¸
		add_char("dead","2620"); //Ã¢ËœÂ 
		add_char("squiggle","2621"); //Ã¢ËœÂ¡
		add_char("radioactive","2622"); //Ã¢ËœÂ¢
		add_char("biohazard","2623"); //Ã¢ËœÂ£
		add_char("caduces","2624"); //Ã¢ËœÂ¤
		add_char("ankh","2625"); //Ã¢ËœÂ¥
		add_char("cross","2626"); //Ã¢ËœÂ¦
		add_char("xp","2627"); //Ã¢ËœÂ§
		add_char("crossb","2628"); //Ã¢ËœÂ¨
		add_char("plusserif","2629"); //Ã¢ËœÂ©
		add_char("cstar","262a"); //Ã¢ËœÂª
		add_char("adishakti","262b"); //Ã¢ËœÂ«
		add_char("bird","262c"); //Ã¢ËœÂ¬
		add_char("hamsickle","262d"); //Ã¢ËœÂ­
		add_char("peace","262e"); //Ã¢ËœÂ®
		add_char("balance","262f"); //Ã¢ËœÂ¯
		add_char("heaven","2630"); //Ã¢ËœÂ°
		add_char("lake","2631"); //Ã¢ËœÂ±
		add_char("fire","2632"); //Ã¢ËœÂ²
		add_char("thunder","2633"); //Ã¢ËœÂ³
		add_char("wind","2634"); //Ã¢ËœÂ´
		add_char("water","2635"); //Ã¢ËœÂµ
		add_char("mountain","2636"); //Ã¢ËœÂ¶
		add_char("earth","2637"); //Ã¢ËœÂ·
		add_char("gear","2638"); //Ã¢ËœÂ¸
		add_char("sadface","2639"); //Ã¢ËœÂ¹
		add_char("happyface","263a"); //Ã¢ËœÂº
		add_char("fhappyface","263b"); //Ã¢ËœÂ»
		add_char("sunb","263c"); //Ã¢ËœÂ¼
		add_char("lmoon","263d"); //Ã¢ËœÂ½
		add_char("rmoon","263e"); //Ã¢ËœÂ¾
		add_char("mercury","263f"); //Ã¢ËœÂ¿
		add_char("female","2640"); //Ã¢â„¢â‚¬
		add_char("mfearth","2641"); //Ã¢â„¢ï¿½
		add_char("male","2642"); //Ã¢â„¢â€š
		add_char("jupiter","2643"); //Ã¢â„¢Æ’
		add_char("saturn","2644"); //Ã¢â„¢â€ž
		add_char("uranus","2645"); //Ã¢â„¢â€¦
		add_char("nuptune","2646"); //Ã¢â„¢â€ 
		add_char("pluto","2647"); //Ã¢â„¢â€¡
		add_char("aries","2648"); //Ã¢â„¢Ë†
		add_char("taturus","2649"); //Ã¢â„¢â€°
		add_char("gemini","264a"); //Ã¢â„¢Å 
		add_char("cancer","264b"); //Ã¢â„¢â€¹
		add_char("leo","264c"); //Ã¢â„¢Å’
		add_char("virgo","264d"); //Ã¢â„¢ï¿½
		add_char("libra","264e"); //Ã¢â„¢Å½
		add_char("scorpius","264f"); //Ã¢â„¢ï¿½
		add_char("sagittarius","2650"); //Ã¢â„¢ï¿½
		add_char("capricorn","2651"); //Ã¢â„¢â€˜
		add_char("aquarius","2652"); //Ã¢â„¢â€™
		add_char("pisces","2653"); //Ã¢â„¢â€œ
		add_char("chessking","2654"); //Ã¢â„¢â€?
		add_char("chessqueen","2655"); //Ã¢â„¢â€¢
		add_char("chessrook","2656"); //Ã¢â„¢â€“
		add_char("chessbishop","2657"); //Ã¢â„¢â€”
		add_char("chessknight","2658"); //Ã¢â„¢Ëœ
		add_char("chesspawn","2659"); //Ã¢â„¢â„¢
		add_char("fchessking","265a"); //Ã¢â„¢Å¡
		add_char("fchessqueen","265b"); //Ã¢â„¢â€º
		add_char("fchessrook","265c"); //Ã¢â„¢Å“
		add_char("fchessbishop","265d"); //Ã¢â„¢ï¿½
		add_char("fchessknight","265e"); //Ã¢â„¢Å¾
		add_char("fchesspawn","265f"); //Ã¢â„¢Å¸
		add_char("fspade","2660"); //Ã¢â„¢Â 
		add_char("heart","2661"); //Ã¢â„¢Â¡
		add_char("diamond","2662"); //Ã¢â„¢Â¢
		add_char("fclub","2663"); //Ã¢â„¢Â£
		add_char("spade","2664"); //Ã¢â„¢Â¤
		add_char("fheart","2665"); //Ã¢â„¢Â¥
		add_char("fdiamond","2666"); //Ã¢â„¢Â¦
		add_char("club","2667"); //Ã¢â„¢Â§
		add_char("hotsprings","2668"); //Ã¢â„¢Â¨
		add_char("notequarter","2669"); //Ã¢â„¢Â©
		add_char("noteeighth","266a"); //Ã¢â„¢Âª
		add_char("notebeighth","266b"); //Ã¢â„¢Â«
		add_char("notebsix","266c"); //Ã¢â„¢Â¬
		add_char("musicflat","266d"); //Ã¢â„¢Â­
		add_char("musicnatural","266e"); //Ã¢â„¢Â®
		add_char("musicsharp","266f"); //Ã¢â„¢Â¯

		mapExists = true;
		return "SUCCESS";
	}
	
	/** Test if a string contains al lowercase alphabetical letters */
	public static boolean lalpha(String str) {
		for (char c : str.toCharArray()) {
			if (!('a' <= c && c <= 'z')) {
				return false;
			}
		}
		return true;
	}
	
	/** Returns a character given its unicode value as a hex string */
	public static char getCharUni(String unicode) {
		return (char)Integer.parseInt(unicode, 16);
	}
	
	/** Returns "(char) (name)" for each entry in the character map */
	public static ArrayList<String> getAllCharDiscs() {
		ArrayList<String> out = new ArrayList<String>();
		Iterator<Map.Entry<String, Character>> entries = specialCharacters.entrySet().iterator();
		while (entries.hasNext()) {
		  Entry<String, Character> thisEntry = (Entry<String, Character>) entries.next();
		  out.add(thisEntry.getValue() + " " + thisEntry.getKey() + "\n(special character)");
		}
		return out;
	}
	
	public static boolean isSpecialChar(char c) {
		return specialCharacters.containsValue(c);
	}
	
	/** Returns the name of a character from the special character set. If the character is
	 *  a-z, return the character as a string.
	 *  If the character is not in the special character set, 
	 *  and if the character is not a-z,
	 *  return null. */
	public static String getName(char special) {
		if(special >= 'a' && special <= 'z') {
			return special+"";
		}
		Iterator<Map.Entry<String, Character>> it = specialCharacters.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, Character> pair = (Map.Entry<String, Character>)it.next();
			if (special == pair.getValue()) {
				return pair.getKey();
		    }
		}
		return null;
	}
	
	/**  
	 * Returns Character.MAX_VALUE if char is invalid */
	public static char parse(String in) {
		String s = in;

		//Character.initMap() should be called in main somewhere
		if(!mapExists) return INVALID;

		//Invalid Character
		if (s.length() < 1) {
			return INVALID;
		}
		
		//Single Character
		else if (s.length() == 1) {
			char c = s.charAt(0);
			switch (c) {
			case 'n':
				return '\n';
			case 't':
				return '\t';
			case 'r':
				return '\r';
			case 'b':
				return '\b';
			case 'f':
				return '\f';
				
			default:
				return c;
			}
		}
		
		//Hex Character
		else if (s.charAt(0) == 'U') {
			s = s.substring(1, s.length()).trim();
			if (isHex(s)) {
				try {
					return (char)Integer.parseInt(s, 16);
				} catch (NumberFormatException e) {
					throw new SyntaxError("Cannot parse character as hex value in " + in);
				}
			} else {
				return INVALID;
			}
		} 
		
		//Special character from list
		else {
			Character c = specialCharacters.get(s);
			if(c == null) {
				return INVALID;
			}
			return c;
		}
	}
		
	/** Returns true if all characters in a string are digits */
	public static boolean allDigits(String s) {
		for(char c : s.toCharArray()) {
			if (!Character.isDigit(c)) {
				return false;
			}
		}
		return true;
	}	
	
	/** Returns true if the string is less than 5
	 * chararacters and are all valid hex characters */
	public static boolean isHex(String s) {
		for(char c : s.toCharArray()) {
			if(Character.isUpperCase(c)) {
				c = Character.toLowerCase(c);
			}
			if ( !((c >= '0' && c <= '9') || (c >= 'A' || c <= 'F')) ) {
				return false;
			}
		}
		return true;
	}

	
	public static String convertCharTabPress(String s) {
		char[] chars = s.toCharArray();
		
		if(s.length() == 0) {
			return TAB_STR;
		}
		
		StringBuilder charName = new StringBuilder();
		StringBuilder otherText = new StringBuilder();
		int i = chars.length-1;
		while (chars[i] != '\\') {
			charName.append(chars[i--]);
			if(i < 0) {
				return s+TAB_STR; //No special character
			}
		}
		i--; //Skip the '\'
		while (i >= 0) {
			otherText.append(chars[i--]);
		}
		
		charName.reverse();
		otherText.reverse();
		
		char c = parse(charName.toString());
		if (c == INVALID || charName.length() == 1) {
			return s+TAB_STR; //No valid character, append the normal tab
		} else {
			return otherText.toString() + c;
		}
	}
}
