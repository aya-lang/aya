.# Dictionary where indexing missing keys, the default value is returned
.# Must use "d.[::key]" syntax not "d.key" as d.key is not overloadable

class defaultdict

def defaultdict::__init__ {dict default self,
    dict self.:dict;
    default self.:default;
}

def defaultdict::__getindex__ {key self,
    self.dict key H! {
        .# Make a copy
        self.default $\; self.dict.:[key];
    } ?
    self.dict.[key]
}

def defaultdict::__setindex__ {value key self,
    value self.dict.:[key]
}

def defaultdict::__str__ {self,
    self.dict P
}

def defaultdict::__repr__ (defaultdict.__str__.`)

.# Create a default dict
:{} 0 defaultdict! :dd;
"> Dict is $dd" :P

"> Adding x=10..." :P
10 dd.:[::x] :P

"> Looking up ::x..." :P
dd.[::x] :P

"> Looking up unknown value ::y..." :P
dd.[::y] :P

"> Dict is $dd" :P
