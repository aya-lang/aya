import ".conversion"
import ".fmt"

class angle

.# Angle constructor always takes a value in degrees
def angle::__init__ {deg self,
    deg self.:degrees;
}

.# Static constructor for creating an angle from radians
def angle::from_rad {rad cls : conversion^,
    rad conversion.rad_to_deg cls!
}

.# Member function for getting radians
def angle::radians {self : conversion^,
    self.degrees conversion.deg_to_rad
}

.# Operator overload to add two angles
def angle::__add__ {other::angle self,
    other.degrees self.degrees + self.M!
}

.# String conversion overload
def angle::__str__ {self : fmt^,
    self.degrees fmt.deg_to_str
}

.# Repr (debug printing) conversion overload
def angle::__repr__ {self : fmt^ deg_str,
    self.degrees fmt.deg_to_str :deg_str;
    .# use same format as used by structs: (<args>..) <class>!
    "($(self.degrees)) angle!"
}





