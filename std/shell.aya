import sys
import terminal
require io {path}

.# Shell-like commands for Aya

struct shellresult {value}

def shellresult::__repr__ {self,
    self.value
}

def shellresult::lines {self,
    self.value '\n' S
}


:{} :shell_impl;

def shell_impl::grep {res::shellresult rgx::str : shellresult^ ,
    res.lines {rgx &E0>} I
    "\n" % shellresult!
}

def shell_impl::cat {filename::str : shellresult^ ,
    filename G shellresult!
}

def shell_impl::echo {data::str : shellresult^ ,
    data shellresult!
}


.#? ls\n  print a list of files in the working dir
def ::ls {: shellresult^ ,
    :(sys.wd) :(sys.readdir)
    .E 0 = {
        ; "  <no files>"
    } {
        C "\n" %
    } .?

    shellresult!
}


.#? pwd\n  print working directory
def ::pwd {: path^ , path.working:P}


.#? cd dir\n  change directory
def ::cd {{sys.cd} 0:`}


.#? mkdir S\n  create a new directory
def ::mkdir { {sys.mkdir} 0 :` }


.# def ::echo ({(4 hold)x (2 hold)~} :{ shell_impl.echo.` :x } .+)

.#? echo S\n  print a string to the console
def ::echo {: shell_impl^,  
    {: shell_impl^, ~ shell_impl.echo } 0 :`
}

.#? cat S\n  print a file to the console
def ::cat {: shell_impl^, 
    {: shell_impl^, ~ shell_impl.cat} 0 :`
}

def ::grep {: shell_impl^, 
    {: shell_impl^, ~ shell_impl.grep} 0 :`
}


def ::touch { {s::str, "" s 1.G} 0 :` }

def ::clear {:terminal^, terminal.clear}


def (__aya__.interpreter)::shell {str : cmd args,
    str ' N $ 0 :> {
        ;; str~
    } {
        Mu trim :args; :cmd;
        cmd~ args
    } .?
}
