.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# golf.aya
.# Defines operators and variables useful for golfing

.# usage: require golf *

.# Import standard library
:(sys.ad) "/std"+ :(sys.readdir) :# { ".aya".^ S W } :# {name, 
    name "golf" =! {
        .# "importing $name...":P 
        name __aya__.importlib.import
    } ?
};

.# Golfing utility functions
.{? pack_bits_to_unicode (L)
    Creates a unicode string in which the 'bits' (list of 0,1) are stored.
    The list can have any length, one output character encodes 20 bits.
    Examples:
      [1 0 1 0] pack_bits_to_unicode -> "U+01000A"
      :0xfffff 10 2 .& pack_bits_to_unicode -> "U+10FFFF"
.}
{bits::list : out tail,
    "":out;
    {
        bits E 0 > :& {
            .# The available range for 4-byte UTF-8 is exactly 20 bits, but the start is offset by 0x010000
            bits 20 .> 2 10 .& :0x010000 +
			:(unicode.from_code_points) out + :out;
            bits -20 S .[0] :bits;
        }?
    }W
    out
}:pack_bits_to_unicode;

.{? unpack_unicode_bits (S)
    Unpacks the bits from a string created by 'pack_bits_to_unicode'.
    Examples:
      "U+010068" unpack_unicode_bits -> [ 1 1 0 1 0 0 0 ]
.}
{str::str,
	str :(unicode.to_code_points)
		{ :0x010000 - 10 2 .& } O
		{20 .> J} % .# pad all entries (except for the first) to 20 bits
}:unpack_unicode_bits;

.{? pack_ascii_to_unicode (S)
    Packs an ascii string to a unicode string using 'pack_bits_to_unicode'.
    Only the last 7 bits of each ascii character are used.
    Examples:
      "hello, world" pack_ascii_to_unicode -> "𐀍𩝦󝺱𗟟󛙤"
.}
{str::str : pack_bits_to_unicode^,
    str :' # {10 2 .& 7 .>} .F pack_bits_to_unicode
}:pack_ascii_to_unicode;

.{? unpack_unicode_ascii (S)
    Unpacks the ascii string from a string created by 'pack_ascii_to_unicode'.
    Examples:
      "𐀍𩝦󝺱𗟟󛙤" unpack_unicode_ascii -> "hello, world"
.}
{str::str : bits out unpack_unicode_bits^,
    str unpack_unicode_bits :bits;
    "":out;
    {
        .# check if at least 7 bits are left, otherwise only padding is left.
        bits E 0 > :& {
            bits 7 .> 2 10 .& .' out+ :out;
            bits -7 S .[0] :bits;
        }?
    }W
    out
}:unpack_unicode_ascii;

.# Standard library shortcuts
:{
    0 .M :num;
    'x.M :char;
    [].M :list;
    "".M :str;

    num.clip.`   num.:c;
    num.digits.` num.:d;
    num.round.`  num.:r;
    num.bits.`   num.:b;
    num.bytes.`  num.:a;

    char.upper.` char.:u;
    char.lower.` char.:l;

    str.upper.`  str.:u;
    str.lower.`  str.:l;
    str.trim.`   str.:t;
    str.lines.`  str.:n;

    list.shuffle.` list.:q;
    list.max.` list.:u;
    list.min.` list.:l;
    list.irange.` list.:i;
}

matrix.matrix.rotate_cols.` matrix.matrix.:n;
matrix.matrix.rotate_rows.` matrix.matrix.:z;

.# Single letter variables

1:a;
2:b;
3:c;
10:d;
:1c:e;
dataframe:f;
.#:g;
.#:h;
.#:i;
.#:j;
1000:k;
{[]}:l;
matrix:m;
'\n':n;
.#:o;
:0c :p;
.#:q;
{.R}:r;
.#:s;
.#:t;
.#:u;
.#:v;
-1 :w;
0:x;
0:y;
0:z;


.# Single byte variables

{=!} "\{not}" := ;
{:P} "\{thorn}" := ;
{:;:P} "\{THORN}" := ;
{2^} "\{sup2}" := ;
.# pop font/back shortcuts
{B\;} "\{iacute}" := ;
{V\;} "\{igrave}" := ;
.# unicode packing shortcuts
{pack_bits_to_unicode} "\{ugrave}" := ; .# ù
{unpack_unicode_bits} "\{uacute}" := ; .# ú
{pack_ascii_to_unicode} "\{agrave}" := ; .# à
{unpack_unicode_ascii} "\{aacute}" := ; .# á


.# cdict variables
:{
  "()" :"(";
  "<>" :"<";
  "/\\":"^";
  "{}" :"{";
  "[]" :"[";

  [1 2]  :"½";
  [1 -1] :"+";
  [-1 1] :"-";
  [0 1]  :".";
  [0 0]  :"0";
  [1 1]  :"1";
  [2 2]  :"2";
  360    :"3";
  128    :"4";
  256    :"8";

  "ABCDEFGHIJKLMNOPQRSTUVWXYZ" :"A";
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" :"B";
  "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz" :"C";
  "012345679" :"D";
  "0123456789ABCDEF" :"H";
  :-7s :"P"; .# printable ascii
  ["QWERTYUIOP" "ASDFGHJKL" "ZXCVBNM"] :"Q";
  "AEIOUaeiou" :"V";
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_" :"W";

} 
.# assign to global __cdict__ variable
:G.[0].:__cdict__;
