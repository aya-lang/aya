.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# set.aya
.# Defines the set data structure

.{? type: set
    The set type is a simple list type where there exits no duplicate elements.
    Create a set by entering a list followed by the set constructor
.}


class set

def set::__init__ {l::list self,
    l self.:list ;
}


.#
.# Adding / Removing elements
.#

.#? ::any ::set.__add__\n  add an item to a set
def set::__add__ {item self,
    item self.in ! {self.list [item] :J;} ? self
}

.#? ::any ::set.__sub__\n  remove an item from a set
def set::__sub__ {item self,
    self.list [item] :| self.:list
}



.#
.# Set operations
.#

.#? ::set ::set.__or__\n  set union
def set::__or__ {other::set self,
    other.list $ \; self.list :J :~ self.M!
}

.#? ::set ::set.__and__\n  set intersection
def set::__and__ {other::set self : l,
    self.list :l;
    other.list # {l \N$ 0:> {I} {;;} .?} self.M!
}


.#? ::set ::set.__div__\n  set difference
def set::__div__ {other::set self,
    other.list $\; self.list :| self.M!
}


.#? ::set ::set.__eq__\n test if two sets are the same
def set::__eq__ {other::set self,
    other.list self.list =
}


.#? ::set ::set.__lt__\n  proper subset
def set::__lt__ {other::set self,
    other self.__leq__            .# subset
    other.list self.list = !  .# proper subset
    &
}

.#? ::set ::set.__gt__\n  proper subset
def set::__gt__ {\.__lt__}


.#? ::set ::set.__leq__\n subset
def set::__leq__ {other::set self : l,
    other.list :l;
    self.list # { l \ N \; 0 :>} {*} %
}

.#? ::set ::set.__geq__\n subset
def set::__geq__ {\.__leq__}



.#
.# Other functions
.#

.#? ::any ::set.in\n  tests if an item is in a set
def set::in {item self,
    self.list item N\; 0 :>
}


.#? ::set.__len__\n  returns the number of elements in the set
def set::__len__ { .list E }


.#? ::set.clear\n  clear the contents of a set
def set::clear {[]\ .:list}

def set::__repr__ {.listP"s"\+}
def set::__str__  {.listP"s"\+}

def set::__each__ {blk self,
    self.list :# {blk}
}


{:set^, set {~\!} 0 :`}:s;
