class plot
class multiplot
class dataset

.# If true, the view command will not open windows
.# Generally useful is running tests
def plot::_supress_windows 0

.# plot
.#   data::list : list of plot.dataset objects (see plot.dataset)
.#   title::str : plot title
.#   bgcolor::color/str : background color
.#   color_cycle::list : override the default color cycle
.#   x,y::dict : axis configuration
.#       gridlines::bool : show axis gridlines
.#       gridline_color::color/str : axis gridline color
.#       zeroline::bool : show axis zero line
.#       visible::bool : draw axis labels
.#       lim::list : min and max axis limits
.#       label::str : axis label
.#   <any value in dataset params will be used as the default value>
.#       for example, setting stroke to 10 here will make it the default
.#       for all lines that do not explicitly provide one
def plot::__init__ {self,
    [] self.:data;

    {,} self.:y;
    {,} self.:x;
}


.# plot.dataset
.#   x::list : domain data
.#   y::list : range data
.#   label::str : name of the dataset
.#   color::color/str : color of line/shapes
.#   stroke::num : stroke weight (may be non-integer)
.#   lines::num (bool) : draw lines between points
.#   points::num (bool) : draw points
.#   yclip::list ([min,max]) : y values outside of this range will not
.#       be rendered, they will create a jump in the graph
def dataset::__init__ {x y params self,
    x self.:x;
    y self.:y;
    self params .+ ;
}

.# Get y as a list
.# If y is a block, apply it to x and return a list
def plot::_get_y {x::list y plot,
    {
        (y.` :T ::block =) {
            x y :y;
        } (y.` :T ::list =) {
            .# noop
        } {
            "invalid" .D
        }
    } :?
    y
}

.# Add a dataset to the plot
def plot::_add_dataset {d::dataset self,
    d self.data .B ;
}

.# Generic plot function
.# Add a new dataset to the plot
def plot::plot {x::list y params::dict self : dataset^,
    x (x y.` self.M._get_y) params dataset! self._add_dataset
}

.# Adds a new dataset to the plot, formatted as a scatter plot
def plot::scatter {x::list y params::dict self : dataset^ d,
    x (x y.` self.M._get_y) params dataset! :d;
    0 d.:lines;
    1 d.:points;
    d self._add_dataset
}

.# Show the plot in a window
def plot::view {self,
    self.M._supress_windows ! {
        "" self.:filename;
        self :{plot.plot}
    } ?

}

.# Multi-Plot
.##############

def multiplot::__init__ {self,
    [] self.:subplots;

    {,} self.:y;
    {,} self.:x;
}

def multiplot::add {plot self,
    plot self.subplots.append;
}

def multiplot::view {self : plot^,
    plot._supress_windows ! {
        "" self.:filename;
        self :{plot.multiplot}
    } ?
}


.# Quick Plot Functions
.########################

.# Create a line plot with default paramaters and x,y as a dataset
def ::line {x::list y::list : p plot^,
    plot! :p;
    x y {,} p.plot
    0 p.:legend;
    p
}

.# Create a line plot with default paramaters and x,y as a dataset
def ::fns {fns::list a::num b::num : x p plot^,
    plot! :p;
    [a b 300] .R :x;
    fns {f, 
        x :& f.` O {, f.`P:label} p.plot
    } O;
    1 p.:legend;
    p
}
