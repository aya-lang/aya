import json

"""
# pkg

Package manager for aya

## REPL API

  - `name pkg.add`: Add a package
    - `name` can be a zip URL or a github repo stub "username/package"
  - `"package" pkg.test"`: Run tests for an installed package
  - `"package" pkg.run"`: Run package.__run__ if the package defines it
  - `"package" pkg.metadata`: Get metadata (package.json) for a package
  - `pkg.list`: Print installed packages
    - `pkg._list_package_metadata` to get dict of all package metadata

""";


.#
.# Logging
.#

.# Set enabled to true if you want debug logging
:{ 1 :enabled; }:_debug_mode;

{msg::str : _debug_mode^,
    _debug_mode.enabled {
        "[DEBUG/pkg]: $msg" :P
    } ?
} :_log_debug;

.#
.# HELPER FUNCTIONS
.#

.# Get root package directory
.# <aya_dir>/pkg
{
    :(sys.ad) "pkg" :(sys.joinpath) :(sys.abspath)
} :get_pkg_dir;


.# pkg/source.json stores a mapping of package names to zip URLs
{:get_pkg_dir^ json^,
    get_pkg_dir "source.json" :(sys.joinpath) local :json_path;
    {
        json_path G
    } {;
        "{}"
    } .K

    json.loads
} :_load_source_data;


{data : get_pkg_dir^ json^,
    .# data
    data json.dumps
    .# path
    get_pkg_dir "source.json" :(sys.joinpath) 
    .# write
    0.G
} :_save_source_data;


.# stub: username/pkgname
.# Get the zip url for this package
{stub::str : json^ _log_debug^,
    .# Fetch repo data so we can determine the default branch
    "https://api.github.com/repos/$stub" G json.loads local :repo_data;
    repo_data.default_branch local :branch;

    .# Zip file URL
    "https://github.com/$stub/archive/refs/heads/$branch.zip"
} :_get_github_zip_url;


.# Return a dict of metadata for all installed packages
.# returns :{ <metadata> :<package_name> }
{: get_pkg_dir^ json^ p,

    get_pkg_dir :p :(sys.readdir) :# {dir,
        p dir :(sys.joinpath) :dir;
        dir :(sys.isdir) {
            dir "package.json" :(sys.joinpath) G json.loads
        } ?
    } local :all_packages;
    :{ [all_packages, :& .name :=];}
} :_list_package_metadata;


{zip_url::str allow_replace : 
    _log_debug^ json^ get_pkg_dir^
    _save_source_data^ _load_source_data^,

    "pkg._install" _log_debug
    get_pkg_dir local :aya_pkg_dir;
    "Using pkg root dir $aya_pkg_dir" _log_debug
    aya_pkg_dir :(sys.mkdir)

    aya_pkg_dir "tmp.zip" :(sys.joinpath) local :zip_path;
    "Downloading file: $zip_url to $zip_path" _log_debug
    zip_url zip_path :(download.to_file)


    .# Unzip
    aya_pkg_dir "tmp" :(sys.joinpath) local :unzip_loc;
    "Unzipping $unzip_loc" _log_debug
    zip_path unzip_loc :(sys.unzip)

    .# Get the location of the package in the unzipped folder
    unzip_loc $ :(sys.readdir).[0] :(sys.joinpath) local :tmp_pkg_dir;
    "Location of unzipped package: $tmp_pkg_dir" _log_debug

    .# Load the package data
    tmp_pkg_dir "package.json" :(sys.joinpath) G json.loads local :pkg_data;
    "Got package data $pkg_data" _log_debug

    aya_pkg_dir pkg_data.name :(sys.joinpath) local :install_pkg_dir;

    1 local :do_install;
    .# If we are not allowed to replace, we must first check to see if it is empty
    allow_replace ! {
        install_pkg_dir :(sys.isdir) {
            "Package '$(pkg_data.name)' already exists, skipping install. Use pkg.update to update an existing package or pkg.remove to remove old package if you would like to install this one" :P
            0 :do_install;
        } ?
    } ?

    do_install {
        .# If there is a package here already, remove it
        install_pkg_dir :(sys.isdir) { install_pkg_dir :(sys.rm) } ?

        "Moving files from $tmp_pkg_dir to $install_pkg_dir" _log_debug
        tmp_pkg_dir install_pkg_dir :(sys.mvdir)

        .# Update installed packages json
        zip_url _load_source_data.:[pkg_data.name] _save_source_data
    } ?

    "Cleaning up..." _log_debug
    zip_path :(sys.rm)
    unzip_loc :9s + :(sys.rm)
} :_install;


.#
.# REPL API
.#

{id::str :
    _install^ _get_github_zip_url^
    allow_replace(0),

    id ".zip" H {
        id allow_replace _install
    } {
        .# If it isn't a zip url, assume it is a github one
        id _get_github_zip_url allow_replace _install
    } .?
} :add;


{name::str :
    _install^ _list_package_metadata^ _load_source_data^
    allow_replace(1),

    name ".aya" H! {
        name ".aya" + :name;
    } ?

    _list_package_metadata local :md;
    md name H {
        .# Get the URL to the zip file
        _load_source_data.[name]
        .# Install with allow_replace set to true
        allow_replace _install
    } {
        "Package $name does not exist. You can install it with pkg.add" .D
    } .?
} :update;


{name::str : get_pkg_dir^ test_dir,
    get_pkg_dir name :(sys.joinpath) "test" :(sys.joinpath) :test_dir;

    test_dir :(sys.isdir) {
        test_dir :(sys.readdir) :# {fname,
            fname ".aya" H {
                :{ .# open new scope
                    [test_dir :9s fname] W 
                    $ "Running test: " \+ :P
                    :F
                };
            } ?
        };
    } {
        "Package $name does not have a test directory" :P
    } .?
} :test;


{name::str : get_pkg_dir^ json^,
    get_pkg_dir name :(sys.joinpath) "package.json" :(sys.joinpath) G json.loads
} :metadata;


{name::str,
    :{ .# open a new scope
        name [::__run__] __aya__.importlib.require

        __run__
    };
} :run;


{name::str :
    _list_package_metadata^ get_pkg_dir^
    _load_source_data^ _save_source_data^,

    _list_package_metadata local :md;

    name ".aya" H! {
        name ".aya" + :name;
    } ?

    md name H {
        _load_source_data name .- _save_source_data
        get_pkg_dir name :(sys.joinpath) :(sys.rm)
        "Package removed: $name" :P
    } {
        "Package $name does not exist. Nothing to remove" :P
    } .?
} :remove;


{: _list_package_metadata^,
    _list_package_metadata :# {_ data,
        "$(data.name) v$(data.version) ($(data.author))" :P
    };
} :list;
