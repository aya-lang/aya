class path

.# Create a new path (accepts relative or abs paths)
.# Custom constructor
{dir::[str path]union meta : absolute_path(0) path^,
    .# Already a path?
    {
        (dir path :@) {
            dir
        }
        (dir str :@) {
            .# If direct path
            dir meta._isabs ! {
                0 :absolute_path;
            } {
                1 :absolute_path;
            } .?
            :{
                dir meta._split :dirs;
                absolute_path :is_absolute_path;
            } meta :M
        }
        {
            "Cannot create path from $dir" .D
        }
    } :?
} path.:__new__;


.# ::path.isfile\n  Return true if path is file (last item in the path contains a ".")
def path::isfile {self,
    self.dirs.[-1] "." H
}


.#? ::str ::path.add\n  append file or dir to path, if path is file, don't change
def path::__add__ {dir::str self,
    .# Can only join if the path is not a file
    self.isfile ! { : newpath ,
        .# Make a copy of this path
        self $ :newpath; ;
        newpath.dirs dir path._split J
        path._clean newpath.:dirs;
        newpath
    } {
        self
    }.?
}

def path::__radd__ {\.__add__}


.# String representation of the path
def path::__str__ {self,
    self.dirs "/" %
    self.is_absolute_path self._iswindows ! & {
        "/" \ +
    } ?
    .#self.dirs :9s % self.M.root :9s + \+
    .#self.isfile ! {:9s +} ?
}

(path.__str__.`,0); path.:__repr__;


.#? ::path.dec\n  Go up a directory
def path::__dec__ {self,
    self.dirs B;; self
}

.#? ::str path.readdir\n  list of file/dir names in the given path
def path::readdir {path,
    P :(sys.readdir)
}

.#? path.working\n  working directory
def path::working {path,
    :(sys.wd) path!
}

.#? path.aya\n  aya directory
def path::aya {path,
    :(sys.ad) path!
}

def path::clean {self,
    self.dirs self._clean self.:dirs;
}


.#
.# Private helper methods
.#


.# ::str path.split\n  split a string using the system file sepatator and remove empty dir names
def path::_split {dir::str path,
    dir '\\' S #{'/ S ~}
    .# Remove empties
    [""] :|
}

.# dirs::list path._fixhome
.# If the path list contains a "~"
.#   find the last "~" and take all directories after it
def path::_fixhome {dirs::list path,
    dirs U "~" N    .# Reverse and find the first ~ (aka the last ~)

    .# Does the path contain a "~" ?
    $ 0 :> {
        .< U .# Take all directories before the "~" and reverse

        .# Append the home dir to the front
        path.home.dirs $\;  .# Copy home.dirs
        \ :J                .# Append to front
    } {
        ;U .# Pop the -1 and put the list back
    } .?
}

.# ::str path._isabs\n  return true of the given string is an absolute path
def path::_isabs {p::str path,
	path._iswindows {
		p 1 I ': =
	} {
		p "/" N0=\;
	} .?
}

.# Remove all ".." by traversing the directories
def path::_clean {dirs::list path : i(0),
    .# Remove root and self refs (".")
    dirs [path.root "."] :| :dirs;

    .# If there is a ".." remove the dir before it
    {{
        .# If there is a "..",
        dirs.[iB] ".." = {
            .# Remove the ".." and the dir before it
            dirs [i iB] .-;
            .# Then move the index back 2
            i2-:i;
        } ?
        ::iB
        i dirs EV <
    }W}
    .# If the above code has an error, the path is invalid
    {; []:dirs;} .K
    dirs
}

def path::_iswindows {self,
	:9s "\\" =
}



.#
.# Constants
.#

.#? path.root\n  root dir name
"user.dir" :(sys.getprop) :9s .^ S .[0] path.:root;



"~" :(sys.resolvehome) path! path.:home;

:{ :(sys.wd) path._split :dirs} path :M path.:dfltworking;



.####################
.# FILE             #
.####################

class file

def file::__init__ {filepath type::char  self : path^,
    .# save a copy of the path
    filepath path!      self.:path ;
    .# open the stream
    self.path P type :(fstream.O) self.:id ;
}

.#? ::file.close\n  close a file. return 1 is success
def file::close {self,
    self.flush;
    self.id 'c :(fstream.O)
}

.#? ::file.isopen\n  test if a file stream is open
def file::isopen {self,
    self.id 'i :(fstream.O) 0 =!
}

.#? ::file.isread\n  return 1 if file is an input stream
def file::isinput {self,
    self.id 'i :(fstream.O) 1 =
}

.#? ::file.iswrite\n  return 1 if file is an output stream
def file::isoutput {self,
    self.id 'i :(fstream.O) 2 =
}

.#? ::file.print\n  print to a file if it is an input stream
def file::print {s self,
    sP self.id :(fstream.O)
}

.#? ::file.println\n  print string followed by a newline tp a file
def file::println {s self,
    sP "\n" + self.id :(fstream.O)
}

.#? ::file.readchar\n  read the next char in the file, return -1 if EOF or invalid stream
def file::readchar {self,
    self.id 'b :(fstream.O)
}

.#? ::file.readline\n  read the next line in the file, return 0 is EOF or invalid stream
def file::readline {self,
    self.id 'l :(fstream.O)
}

.#? ::file.readall\n  read all text in the stream, return "" if EOF and 0 if invalid stream
def file::readall {self,
    self.id 'a :(fstream.O)
}

.#? ::file.lines\n  return a list containing the lines in the file
def file::lines {self,
    self.id 'a :(fstream.O) '\n' S
}

.#? ::file.flush\n  flush an output stream
def file::flush {self,
    self.id 'f :(fstream.O)
}

def file::__repr__ {self,
    [
        self.isopen
            {"<stream(" self.isinput {"R"} {"W"} .? "):"}
            "<closed:"
        .?
        self.path P ">"
    ]W
}


.{ Example:

    "file.txt" 'r file!.do {f,
        f.readll :P
    }
.}
def file::do {self,
    {:self^, ~ self._do} 0 :`
}

.# Helper function for file.do
def file::_do {blk__::block self__,
    {
        self__ blk__
    } {e,
        self__.close;
        e .D .# re-throw
    } .K
    self__.close;
}

.#? stdin::file\n  standard input stream
:{
    1:id;

    .# Overloads
    1:isopen;
    0:close;
    1:isread;
    0:iswrite;
    "stdin":path;
} file :M :stdin;

.#? stdout::file\n  standard output stream
:{
    2:id;

    .# Overloads
    1:isopen;
    0:close;
    1:iswrite;
    0:isread;
    "stdout":path;
} file :M :stdout;



.# dummyfile for testing opening and closing of input streams

class dummyfile

def dummyfile::__init__ {name self,
    "opened dummy file '$name'" :P
    name self.:name;
}

def dummyfile::__repr__ {self,
    "<dummyfile: $(self.name)>"
}

def dummyfile::close {self,
    "closed dummy file '$(self.name)'" :P
}

dummyfile file.:dummyfile ;


:{
    {path, .# ::path or ::str
        path P :(fileutils.readallbytes)
    }:readallbytes;

}:fileutils;
