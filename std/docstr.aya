{f: argtypes args d,
    {,}:d;
    f.`.M W
    args :# {k,
        k :C argtypes.[k] "" arg! k d :D
    };
    d
}:arginfo;



class docstr

def docstr::__init__ {name string::str self,
    .# If single item in a list, unwrap the list
    name :T ::list = {
        name E 1 = {
            name.[0] :item;
        } ?
    } ?

    {
        .# If list, use module and name
        name :T ::list = {
            name.[0] :module;
            name.[1] :id;
        } {
            nil :module;
            name :id;
        } .?

        id :T ::sym = "" assert
    } {err,
        err :P
        "docstr name must be either a list containing a module and a symbol OR a single symbol" .D
    } .K

    module self.:_module;
    id self.:_name;
    string self.:_full_str;

    {,} self.:sections;
    { self._parse self.:sections; } {err, "Error parsing docstr:\n$err" .D} .K

    {,} self.:_args;
    self.sections ::args H {
        self._parseargs self.:_args;
    } ?
}

def docstr::_parse {self : m("@.+:\n") d keys vals,
    self._full_str m & #{.trim B; V;} "desc" \J :keys;
    self._full_str "@.+:\n" S :# {.trim.lines :# {.trim"\n"+}W.trim}:vals;

    {,}:sections;
    vals keys {sections :D} .&;

    sections
}

.# Inner class
docstr {, class arg} .+;

def (docstr.arg)::__init__ {name desc self,
    name.[0] ': = self.:is_stack_arg;

    self.is_stack_arg {
        "-"     self.:name;
        name :S self.:type;
    } {
        name    self.:name;
        ::any   self.:type;
    } .?

    desc.trim self.:desc;
}

def (docstr.arg)::__repr__ {self : n l,
    0 self.show
}

def (docstr.arg)::show {margin self : n l pad,
    self.is_stack_arg {
        "$(self.type): "
    } {
        self.type ::any = {
            "$(self.name): "
        } {
            "$(self.name) ($(self.type)): "
        } .?
    } .?

    .E :n;
    " " margin LW :pad;
    self.desc.lines :#{
        " "nLW\+"\n"+ pad\+
    }W.trim + pad \+
}

def docstr::_parseargs {self : matcher("(?m)^(:(2)|)[a-z]+:"),
    .# Names
    self.sections.args matcher & :#{B;}
    .# Desc
    self.sections.args matcher S V;
    .# Create list of arg objects
    {J}.& :# {~ self.M.arg!}
}

def docstr::owner {self,
    self._module nil = {
        {
            self._name ~
        } {;
            "docstr owner ($(self._name)) is not defined" .D
        } .K
    } {
        {
            self._module self._name I
        } {;
            "docstr owner ($(self._module_name).$(self._name:C)) is not defined" .D
        } .K
    } .?
}


def docstr::_getargtypes {self : at f,
    .# Get arg types from block
    self.owner:f;

    f.` :T ::block = {
        f.`.M.argtypes:at;
        .# If the arg is not a stack arg, copy over its type
        self._args :# {a,
            a.is_stack_arg! {
                {
                    at.[a.name] a.:type;
                } {err,
                    "[warning] in docstr: block does not have arg ::$(a.name)":P
                    self._full_str :P
                } .K
            } ?
        };
    } ?
}

def docstr::finalize {self,
    self._getargtypes
}

def docstr::_module_name {self,
    .# Try to get the name of the module
    self._module ::__type__ H {
        self._module.__type__ :C
    } {
        "<module>"
    } .?
}

def docstr::_get_name {self,
    self._module ::__type__ H {
        self._module.__type__ :C "." self._name :C ++
    } {
        self._name :C
    } .?
}

def docstr::_get__doc__ {self,
    d._module nil = {
        .# Access from scope
        {__doc__;} {;{,}:__doc__;} .K

        __doc__
    } {
        .# Access from module
        {d._module.__doc__;} {; {,} d._module.:__doc__;} .K

        d._module.__doc__
    } .?
}

def docstr::_padlines {n s,
    s.lines :#{" "nLW\+"\n"} W
}

def docstr::show {self : builtin docstr^,
    [::desc ::args ::example]:builtin;

    [
        self._get_name
        .E "-" \LW
        self.sections.desc
        ""
        "args:"
        self._args #{2 \ .show}~
        ""
        "example:"
        2 self.sections.example docstr._padlines
        self.sections :K .[{builtin \ H}] :# {k,
            k :C
            2 self.sections.[k] docstr._padlines
        } ~
    ] #'\n'+ W .trim
}


def docstr::add_to_help {self,
    [".{?" self.show ".}"]W~
}

def docstr::to_html {self,
    [
        "<h2>$(self._get_name)</h2>"
        "<br />"
        "<p>$(self.sections.desc)</p>"
        "<h4>Args:</h4>"
        "<ul>"
        self._args
    ] #'\n'+ W .trim
}


{(2 hold)({:d,
    docstr! :d:dd;

    .# Add the doc to the module (or global scope)
    .# Create __doc__ if it does not yet exist
    d d._name d._get__doc__ :D ;
    d.add_to_help
})}:doc;

def docstr::__repr__ {self,
    "<docstr for $(self._name :C)>"
}


{(1 hold)({x,
    x :T ::list = {
        x.[0].__doc__.[x.[1]] .show :P
    } ?
})}:help;

.{
struct example {a b}

doc [example::variable] """
    Some description of the variable or function
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    Aliquam pulvinar, metus et pretium malesuada, risus
    risus pulvinar lacus, ut molestie neque sapien at felis.
    (by default, this text ends up in the "desc" key

@args:
    ::num: the first stack arg
    ::list: the second stack arg
    a: what a is for
        more info about a
  more about a
  b: what b is for

@example:
    aya> {x, a x +}.capture[::a]
    {x : a , a x + }
    aya> {x, a x +}.capture[::a] :f
    {x : a , a x + }
    aya> 5 f
    6
    aya> 2:a
    2

@other_key:
    more text that will end up in the above key
"""
def example::variable {a b::num, }
.}
