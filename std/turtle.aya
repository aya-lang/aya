require canvas {canvas}
require color {color colors}

.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.{
    turtle

    A simple turtle graphics library
    The API is modeled after python's built-in turtle library

    Examples:
        .# Offset nested balls
        :{ 200:width 200:height} turtle!:t
        10R :# {n, {0.1 t.right n t.fd 2:Z} 100 %} ;

        .# A small colorful star
        color.colors.red {10\.hueshift $ t.pencolor 40 t.fd 124 t.right} 36 %
.}


colors.white :c_white;
colors.black :c_black;

class turtle

def turtle::__init__ {params::dict self : canvas^ c_black^ c_white^,

    .# Default values
    :{
        0:x
        0:y
        0:r
        400:width;
        300:height;
        ::deg:units;
        1 :autodraw;
        c_white :bg_color;
        c_black :fg_color;
        (-1) :canvas;
    }

    .# Merge user defined
    params .+ :params;

    params.x self.:_x;
    params.y self.:_y;
    params.r self.:_r;

    params.units [::deg ::degrees].in self.:_use_deg;

    .# Use the provided canvas or generate one?
    params.canvas (-1) = {
        params.width self.:_w;
        params.height self.:_h;
        :{ self._w:width self._h:height "Turtle":name } canvas! self.:_cvs;
    } {
        params.canvas self.:_cvs;
        self._cvs.width self.:_w;
        self._cvs.height self.:_h;
    } .?

    .# Draw background
    params.bg_color self._cvs.set_color
    0 0 self._cvs.width self._cvs.height self._cvs.fillrect

    params.fg_color self._cvs.set_color


    1 self.:_pen_down;
    params.autodraw self.:_autodraw;


}

def turtle::__repr__ {self,
    "turtle: pos=($(self._x), $(self._y)) dir=$(self._r)"
}

def turtle::wait {self,
    self._cvs.wait
}

.#################
.# Turtle Motion #
.#################

def turtle::fd {n self : px py,
    self._x :px;
    self._y :py;
    self._x self._r Mc n * + self.:_x;
    self._y self._r Ms n * + self.:_y;
    px py self._step_from
}

def turtle::right {amount self,
    self._r amount self._to_rad + self.:_r;
}

def turtle::left {amount self,
    self._r amount self._to_rad - self.:_r;
}

def turtle::goto {x y self : px py,
    self._x :px;
    self._y :py;
    x self.:_x;
    y self.:_y;
    px py self._step_from
}

def turtle::pos {self,
    self._x self._y
}

def turtle::draw {self,
    self._cvs.show
}

def turtle::close {self,
    self._cvs.close
}

.###############
.# Pen Control #
.###############

def turtle::pendown {self,
    1 self.:_pen_down;
}

def turtle::penup {self,
    0 self.:_pen_down;
}

def turtle::isdown {self,
    self._pen_down
}

def turtle::pencolor {c::color self,
    c self._cvs.set_color
}


.####################
.# Helper Functions #
.####################


.# This function maps the turtle
.# coordinate space to the canvas coordinate space
.# The turtle lives in a coordinate frame where (0,0) is
.# at the center of the canvas.
def turtle::_tf {x y self,
    x self._w 2/ +
    y self._h 2/ +
}

.# Convert the input value to radians if units is degrees
def turtle::_to_rad {val self,
    self._use_deg
        val :1p1 180 / *
        val
    .?
}


.# Callback function for after the turtle steps
.# Assumes the turtle's position has already been updated
.# px and py are the turtles previous location
def turtle::_step_from {px py self,
    self._pen_down {
        px py self._tf
        self._x self._y self._tf
        self._cvs.line
        self._autodraw {
            self._cvs.show
        } ?
    } ?
}

.#############
.# Overloads #
.#############

def turtle::__rpow__ {self val,
  val self.fd
  self
}


.# For testing
:{
    100 :width
    100 :height
    ::deg :units
} turtle! :t
