.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# bitset.aya
.# Defines bitset type

class bitset
export ::bitset

def bitset::__new__ {s meta,
    s :T ::num = {
        :{ s:size 0sL:bits } meta :M
    } {
        s meta.fromlist
    } .?
}

def bitset::fromlist {l::list : bitset^,
    :{ lE:size l:bits } bitset :M
}


def bitset::__str__ { .bits P "bitset!" + }

def bitset::__repr__ (bitset.__str__.`)



.#? index ::bitset.set\n  set the bits given by the index to true
.{ Example:
    aya> 4 bitset! :b
    [ 0 0 0 0 ]
    aya> 1 b.set
    aya> b
    [ 0 1 0 0 ]
    aya> [0 3] b.set
    aya> b
    [ 1 1 0 1 ]
.}
def bitset::set {n self,
    1 self.bits.:[n];
}


.#? index ::bitset.set\n  set the bits given by the index to false
.{ Example:
    aya> [1 0 1 0] bitset! :b
    [ 1 0 1 0 ]bitset!
    aya> 0 b.reset
    aya> b
    [ 0 0 1 0 ]bitset!
.}
def bitset::reset {n self,
    0 self.bits.:[n];
}

.#? ::bitset.__getindex__\n  get value of bit at the given index
.{ Example:
    aya> [1 0 1 0] bitset! :b
    [ 1 0 1 0 ]bitset!
    aya> b.[0]
    1
    aya> b.[0 2]
    [ 1 1 ]
.}
def bitset::__getindex__ {n self,
    self.bits.[n]
}


.#? ::bitset.count\n  return the number of true bits in the set
.{ Example:
    aya> [0 1 0 1] bitset! .count
    2
    aya> [1 1 1 1] bitset! .count
    4
.}
def bitset::count { .bits W }

.#? ::bitset.__signum__\n  not each bit
.{ Example:
    aya> [1 0 1 0] bitset! .!
    [ 0 1 0 1 ]bitset!
.}
def bitset::__signum__ {self,
    self.bits #! self.M.fromlist
}


.#? ::bitset ::bitset.__or__\n  or two bitsets
.{ Example:
    aya> [0 0 0 1] bitset! [1 1 0 0] bitset! |
    [ 1 1 0 1 ]bitset!
.}
def bitset::__or__ {other self,
    other.bits self.bits {|}.&
    self.M.fromlist
}


.#? ::bitset ::bitset.__and__\n  and two bits
.{ Example:
    aya> [1 0 0 1] bitset! [1 1 0 0] bitset! &
    [ 1 0 0 0 ]bitset!
.}
def bitset::__and__ {other self,
    other.bits self.bits {&}.&
    self.M.fromlist
}


.#? ::bitset.__len__\n  the size of the bitset
.{ Example:
    aya> [1 1 0 0] bitset! E
    4
    aya> [1 1 0 0 1 1 0 0] bitset! E
    8
.}
def bitset::__len__ { .bits E }
