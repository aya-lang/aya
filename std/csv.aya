:{} :csv;
export ::csv

def csv::parse {dlm : rgx,
    "(?<=^|$dlm)(\"(?:[^\"]|\"\")*\"|[^$dlm]*)" :rgx; .#"
    '\n' S :# {line,
        line.trim :line;
        line rgx & :#{.trim .rmquote .!}
    }
}

def csv::open {f : csv^,
    fP G "," csv.parse
}

def csv::read { arg : csv^ ,
    {
        (arg :T ::str =) {
            .# convert to dict
            :{ arg :filename }
        } (arg :T ::dict =) {
            arg
        } {
            "csv.read: Unsupported arg type $(arg:T). Must be ::str or ::dict" .D
        }
    } :?

    csv._read_kw
}

def csv::_read_kw {kwargs::dict : csv^
                                clabel(1) .# bool
                                rlabel(::nil) .# bool
                                filename(::nil) .# str
                                csv_str(::nil) .# str
                                dlm(",")
                                data
                                colnames(::nil) .# ::list
                                rownames(::nil) .# ::list
                                ,
    kwargs ~

    (csv_str ::nil = filename ::nil = &) {"csv.read: Must provide either filename or csv_str" .D} ?

    .# Open the file and read into data
    filename ::nil =! {filenameP G :csv_str;} ?

    csv_str dlm csv.parse :data;

    .# Attempt to auto-detect rlabel if it is not specified
    rlabel ::nil = {
        data.[0].[0] "" = {
            1 :rlabel;
        } {
            0 :rlabel;
        } .?
    } ?

    .# CSV has column headers
    clabel {
        data V :colnames; ;
        .# If there are row labels, the first entry is for the index colum
        rlabel {colnamesV;:colnames;} ?
    } ?

    rlabel {
        data :#{V\;} :rownames;
    } ?

    :{
        data:data
        colnames:colnames
        rownames:rownames
    }
}

.#? list sep na csv.dumps\n  convert a 2d list to a csv string
def csv::dumps {list sep na,
    list :# {
        :#{
            .# If it is na, make it emptystr
            :& na = {;""} ?
            .# If it is a string, surround with quotes
            :& P \ ::str :@ {"\""+ "\""\+} ?
        }
        sep %
    } "\n" %
}


