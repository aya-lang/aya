.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# unit.aya
.# Note: This file is currently deprecated.
.#       It will be reintroduced at a later time.

.{ Todo:
   Make all units objects
   Overload operators
     "1ft 12in +"~ => 2ft
     "1mile 1hour /" => 1mph
     "3hour 1mph *" => 3mile
.}

:{

    .# Length

    0.001:mm:milimeter;
    0.01:cm:centimeter;
    1:m:meter;
    1000:km:kilometer;
    0.0254:in:inch;
    0.3048:ft:feet;
    0.9144:yd:yard;
    1609.34:mi:mile;
    1852:nmile:nauticalm;

    .# Mass

    0.000001:mg:milligram;
    0.001:g:gram;
    1:kg:kilogram;
    1016.05:lton:longton;
    907.185:shton:shortton;
    6.35029:st:stone;
    0.453592:lb:pound;
    0.0283495:oz:ounce;

    .# Time

    1:s:second;
    60:min:minute;
    3600:hr:hour;
    86400:day;
    604800:week;
    31536000:yr:year;

    :1e-3:milisecond:ms;
    :1e-6:microsecond;
    :1e-9:nanosecond:ns;


    .# Data

    1:bit;
    1000:kilobit:kib;
    1000 kilobit *:megabit:mib;
    1000 megabit *:gigabit:gib;
    1000 gigabit *:terabit:tib;
    8:byte;
    1000 byte *:kilobyte:kb;
    1000 kilobyte *:megabyte:mb;
    1000 megabyte *:gigabyte:gb;
    1000 gigabyte *:terabyte:tb;


}:unit;


.# Conversion functions (Uncomment to use)

.# Type saftey version
{(1 hold)({num::num from::num to::num, num from * to/})}:to;

.# Regular Version
.#	{(1 hold)(\@*\/)}:to;

:{
    {(1 hold)({sub super : super_type,
        super.__type__ :super_type;
        super ::__type__ .- ;
        sub super .+ ;
        super_type super.:__type__;
    })}:extends

    class time

    def time::__init__ {n self,
        n self._to_sec self.:s;
    }

    def time::to_sec {self,
        self.s
    }

    def time::__str__ {self,
        self.s self._from_sec " " +
        self :T :C +
    }

    def time::__repr__ (time.__str__.`)

    def time::_to_sec {n self,
        n self.scale_factor *
    }

    def time::_from_sec {n self,
        n self.scale_factor /
    }

    def time::__add__ {a b,
    }


    class minute

    minute extends time

    def minute::scale_factor 60


    class hour

    hour extends time

    def hour::scale_factor (60 60 *)

} :time;

{:time^, time.minute!}:minute;
{:time^, time.hour!}:hour;

