.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# colors.aya
.# Defines both color and colors types

.{? class: color
    A module for manipulating and printing colors in Aya
.}
class color
export ::color


.#
.# Constructors
.#

def color::__init__ {r::num g::num b::num self,
    [[r g b], .round 0 255 .clip] ~
    self .:b .:g .:r ;
    1.0 self.:a;
}


def color::newhex { color ,
    0 dot_i '#= {V;} ? .# Strip leading '# if it exists
    16 2 .& 24 .> [3 8] L #{2 10 .&} ~ color!
}


def color::newhsv { color,
    color.hsvtorgb~ color!
}

def color::fromstr { s::str color,
    s :(color.fromstr) color.fromdict
}

def color::fromdict { d::dict color ,
    d.r d.g d.b color!
}


.#
.# Overloads
.#

def color::__repr__ {self,
    "($(self.r) $(self.g) $(self.b)) color!"
}


def color::__str__ {self,
    "($(self.r) $(self.g) $(self.b)) color!"
}


.#
.# Math
.#

.#? ::color ::color *\n  multiply two colors
def color::__mul__ {other self
    other.rgbf self.rgbf * 255* ~ self.M!
}


.# ::color N *\n  multiply a color by a value
def color::__rmul__ {self n,
    self.rgbf n * 255* :#{0 255 .clip} ~ self.M!
}


.#
.# Conversions
.#

.#? ::color.rgbf\n  return a list of RGB values represented as floats from 0.0 to 1.0
def color::rgbf {self, [self.r self.g self.b] 255 / }


.#? ::color.rgb\n  return a list containing red, green, and blue values respectively
def color::rgb {self, [self.r self.g self.b]}


.#? ::color.hex\n  return a hexadecimal string representation of the color
def color::hex {.rgb #{10 16 .& 2 '0 @.lpad}W}


.#? ::color.hsv\n  return a list containing hue, sat, and val respectively
def color::hsv {self, self.rgb255/~ self.M.rgbtohsv}


.#
.# Interpolation
.#

.#? ::num ::color ::color.grad\n  creates a gradient of rgb lists from color1 to color2
def color::grad {n::num begin::color self,
    [ [begin.rgb self.rgb, [2| n] .R .\]~, self.M!]
}

.#? ::color ::color color.mid\n  returns the color in between color1 and color2 using rgb
def color::mid {3@@\.grad 1I}


.#? [::color] N color.multigrad\n  compute a linear gradient with resolution N between each color
def color::multigrad {l n,
    [l {a b, n a b .grad B} / ; ].F
}

.#? N ::color.hueshift\n  shift hue by N degrees
def color::hueshift {n self,
    self.hsv $\; V n + 360 :% \J ~ self.M.newhsv
}


.#
.# Static conversion utilities
.#

.#? NNN color.hsvtorgb\n  convert h s v (0-360,0-1,0-1) color to hsv
def color::hsvtorgb {h s v color : hi p q t ff,
    .# no saturation, just greyscale
    s 0 = {
        [v v v]
    } {
        .# Compute hue index
        .# floor -> mod 360 -> /60 (hh) -> floor (hi)
        h 360 :% 60 /:hh;
        hh .\ :hi;

        hh hi - :ff; .# fractional part

        v 1 s - * :p;
        v 1 s ff * - * :q;
        v 1 s 1 ff - * - * :t;

        [
            [v t p]
            [q v p]
            [p v t]
            [p q v]
            [t p v]
            [v p q]
        ] hi I
    } .?

    255* :#{.round}
}


.#? NNN color.rgbtohsv\n  convert r g b color to hsv\n  r,g,b values are from 0 to 1
def color::rgbtohsv {r g b color : h s v delta maxv minv,
    [r g b].min:minv;
    [r g b].max:maxv;
    maxv:v;
    maxv minv-:delta;

    maxv 0 =! {
        r maxv = {
            g b- delta/
        } {
            g maxv = {
                b r- delta/ 2+
            } {
                r g- delta/ 4+
            } .?
        } .? 60* :h;

        h 0< {h 360+:h;} ?

        delta maxv/:s;
    } {
        0:s;
        -1:h;
    } .?
    [h s v]
}


.{? module: colors
    The colors module defines several color objects. For example:
      colors.red
      colors.aqua
      colors.raspberry
.}
module colors

:{
    :(color.name_list) :# {color_name : color_dict,
        color_name :(color.fromstr) :color_dict;
        color_dict.r color_dict.g color_dict.b color! color_name :=
    }
}:named_colors;

.# Add all named colors to the colors module
colors named_colors .+

72  72  68  color! colors.:fg;    .# Aya GUI foreground color
39  40  34  color! colors.:bg;    .# Aya GUI background color

def colors::Q {
    ;255Q 255Q 255Q color!
}

.# Add the colors module as a submodule of color
def color::colors colors
