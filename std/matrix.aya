import ::mp

class matrix
export ::matrix

.# Test if list is a valid matrix
def matrix::_is_valid_list {m::list matrix,
    .# Both of the following must be true:
    m :#{:T::list=} .allt   .# The list is made up of only other lists
    {
        m :#{Em0IE=} .allt  .# All of the list lengths are the same
    } 0 .?
}

def matrix::__init__ {input::list self,
    input self.M._is_valid_list {
        input self.:rows;
    } {
        "$input is not a valid matrix" .D
    } .?
}

.# Use this instead of the constructor to avoid
.# validating the list
def matrix::_new {matrix,
    :{rows,} matrix :M
}

.{ Example:
    aya> [3 3] matrixR 10^
    [[ 1         1024       59049      ]
     [ 1048576   9765625    60466176   ]
     [ 282475249 1073741824 3486784401 ]]
.}
def matrix::__repr__ {self,
    self.r self.c + 100 > {
        "($(self.r)x$(self.c) matrix)"
    } {
       self.rows .matstr "\n" " ]\n [ " .& "[[ " \+ " ]]"+
    } .?
}


.# Vectorized Operator Overloads
.###############################

.# Binary
.# ------

[
    ::__sub__ ::__div__
    ::__pow__ ::__lt__  ::__gt__  ::__mod__
    ::__leq__ ::__geq__ ::__idiv__
] :# {op_sym : mp^ op_to_n op rop rop_sym,
    
    [::n op_sym] mp.merge :op_to_n;
    op_sym.op :op;
    [::other {\} op_sym] mp.merge :rop;
    op_sym.rev :rop_sym;

    def matrix op_sym {other self : op^ rop^,
        {
            (other :T ::matrix =) {
                other.rows self.rows op.` .& self.M._new
            } (other :T ::num =) {
                self.rows :# rop.` self.M._new
            } { 
                "TypeError: Invalid operation $(other:T) $(self:T) *" .D
            }
        } :?
    }

    def matrix rop_sym {self n::num : op_to_n^, self.rows :# {op_to_n} self.M._new}
}

def matrix ::__mul__ { other self,
    {
        (other :T ::matrix =) {
            selfE otherE = {
                other.rows self.rows {*} .& self.M._new
            } {
                self.rows other.rows  {{*}:*{~}O}:*{~}O self.M._new
            } .?
        } (other :T ::num =) {
            self.rows {other *} O self.M._new
        } {
            "TypeError: Invalid operation $(other:T) $(self.T) *" .D
        }
    } :?
}

def matrix::__rmul__ {self n::num,
    self.rows [n {*}].* O self.M._new
}

def matrix::matmul {other self, 
    other.rows self.rows :(la.mul) self.M._new
}

def matrix ::__add__ { other self,
    {
        (other :T ::matrix =) {
            selfE otherE = {
                other.rows self.rows {+} .& self.M._new
            } {
                self.rows other.rows  {{+}:*{~}O}:*{~}O self.M._new
            } .?
        } (other :T ::num =) {
            self.rows {other \+} O self.M._new
        } {
            "TypeError: Invalid operation $(other:T) $(self.T) *" .D
        }
    } :?
}

def matrix::__radd__ {self n::num,
    self.rows {n +} O self.M._new
}




.# Unary
.# -----
[
    ::__floor__ ::__ceil__ ::__negate__ ::__abs__ ::__signnum__
    ::__sqrt__ ::__exp__ ::__ln__ ::__log__
    ::__sin__ ::__asin__ ::__cos__ ::__acos__ ::__tan__ ::__atan__
] :# {sym : op,
    sym.op :op;
    def matrix sym ({
        :& .rows op #~ \.M._new
        } :{ op.`:op } .+
    )
}

.# Other Overloads
.# ---------------


def matrix::_eq_num {n self,
    self.rows n .= self.M._new
}

def matrix::_eq_list {l self,
    self.rows :# {
        .# Test if the current item is in the list
        :# {l \ H}
    } self.M._new
}

def matrix::_eq_mat {a b,
    aE bE =! 0 {a.rows b.rows =} .?
}

.#? ::matrix ::matrix =\n  test if two matrices are equal
.#? ::list ::matrix =\n  return a matrix of booleans where true if the corresponding element is in the input list
.#? ::num ::matrix =\n  return a matrix of booleans there true if the corresponding element is equal to the input number
def matrix::__eq__ ({a b,
    a b
    .# swap args if b is not a matrix
    b :T ::matrix =! {\} ?
    __fn 3.$ :T I ~
} :{
    :{
        matrix._eq_list.` :list;
        matrix._eq_num.`  :num;
        matrix._eq_mat.`  :matrix;
    }:__fn
} .+)


.#? ::matrix ::matrix &\n  element-wise and
def matrix::__and__ {:matrix^, .rows\.rows {{&}.&}.& matrix._new}

.#? ::matrix ::matrix |\n  element-wise or
def matrix::__or__  {:matrix^, .rows\.rows {{|}.&}.& matrix._new}




.#####################
.# Matrix Operations #
.#####################

.#? ::matrix ::matrix.sq\n  square each value in the matrix
def matrix::sq { :& * }


.#? ::matrix matrix.issq\n  returns true if the list is a square matrix
def matrix::issq {self, self.rowsE self.rows#E\#= `| %}

.#? ::matrix matrix.tr\n  trace of a matrix as a list
def matrix::tr {[1|.rows$ER,VI]}

.#? ::matrix matrix.t\n  transpose a matrix
def matrix::t {:&.rows.T\.M._new}

.#? ::matrix.max\n  the max value of a matrix
def matrix::max {.rows#.max.max}

.#? ::matrix.min\n  the min value of a matrix
def matrix::min {.rows#.min.min}

.#? ::matrix.norm\n  normalize the matrix
def matrix::norm {:& .sq .sum .^ /}

.#? ::matrix.sum\n  the sum of all values in the matrix
def matrix::sum {.rows #WW}

.#? ::matrix.mean\n  the mean of all values in the matrix
def matrix::mean {.E~* \.sum\/}

def matrix::dot {o self : t matrix^,
    o.c self.r =! {
        "matrix.mul: shape mismatch $(o.c) != $(self.r)".D
    } ?
    .# (*W) is the dot product
    self.rows.T :t;
    o.rows  :# {r, t :#{r *W}}
    matrix._new
}

.#? ::matrix.r\n  number of rows
def matrix::r {.rowsE}

.#? ::matrix.c\n  number of cols
def matrix::c {.rows.[0] E}

.###################
.# Transformations #
.###################

.#? ::matrix ::matrix.hcat\n  concatenate horizontally
def matrix::hcat {a::matrix b::matrix,
    a.rows b.rows {J} .& a.M._new
}

.#? ::matrix ::matrix.vcat\n  concatenate vertically
def matrix::vcat {a::matrix b::matrix,
    a.rows b.rows J a.M._new
}

.#? ::num ::matrix.rotate_cols\n  shift columns of a matrix right N times
.#? ::num ::matrix.rotate_rows\n  shift rows of a matrix down N times
.{ Example:
    aya> [3 3]matrixR
    [[ 1 2 3 ]
     [ 4 5 6 ]
     [ 7 8 9 ]]

    aya> 1 [3 3]matrixR.rotate_rows
    [[ 7 8 9 ]
     [ 1 2 3 ]
     [ 4 5 6 ]]

    aya> 1 [3 3]matrixR.rotate_cols
    [[ 3 1 2 ]
     [ 6 4 5 ]
     [ 9 7 8 ]]
.}
def matrix::rotate_cols {:matrix^,
    .rows \ #{\.rotate} matrix._new
}

def matrix::rotate_rows {:matrix^,
    .rows .rotate matrix._new
}

def matrix::circshift {rc self : m,
    rc.[0] self.rotate_rows :m;
    rc.[1] m.rotate_cols
}

.#? [rows cols] ::matrix .<\n  cut or pad the matrix to the given size from the upper left corner
.{? Example:

    aya> [2 2] matrixR [3 3] .<
    [[ 1 2 0 ]
     [ 3 4 0 ]
     [ 0 0 0 ]]

    aya> [2 2] matrixR [3 2] .<
    [[ 1 2 ]
     [ 3 4 ]
     [ 0 0 ]]

    aya> [2 2] matrixR [3 1] .<
    [[ 1 ]
     [ 3 ]
     [ 0 ]]

    aya> [2 2] matrixR [2 3] .<
    [[ 1 2 0 ]
     [ 3 4 0 ]]

    aya> [2 2] matrixR [1 3] .<
    [[ 1 2 0 ]]
.}
def matrix::__head__ {self n::list : d,
    n E 2 =! {"dimension of take must be 2" .D} ?

    .# rows
    self.rows n.[1] #.<

    .# cols
    .# Pad the list with 0s
    n.[0] .<
    .# create empty list equal to the length of the first element
    .# ex: cols=5 then create [0 0 0 0 0]
    0 dot_i E 0\L :d;
    .# Replace 0s with the empty list
    :# {$ 0 = {;d} ?}

    self.M._new
}


.#? [rows cols] ::matrix .<\n  cut or pad the matrix to the given size from the bottom right corner
def matrix::__tail__ {self n::list : d,
    n E 2 =! {"dimension of take must be 2" .D} ?

    .# rows
    self.rows n.[1] #.>

    .# cols
    .# Pad the list with 0s
    n.[0] .>
    .# create empty list equal to the length of the last element
    .# ex: cols=5 then create [0 0 0 0 0]
    -1 dot_i E 0 \L :d;
    .# Replace 0s with the empty list
    :# {$ 0 = {;d} ?}

    self.M._new
}


.#? ::num ::matrix.pad\n  insert N outer cols and rows of zeros
.{ Example:
    aya> 1 4R [2 2]L matrix!.pad
    [[ 0 0 0 0 ]
     [ 0 1 2 0 ]
     [ 0 3 4 0 ]
     [ 0 0 0 0 ]]
.}
def matrix::pad {n::num self : r c,
    self.r :r;
    self.c :c;

    self [r n + c n +] .<
    [r n2* + c n2* +] .>
}




.#############
.# Overloads #
.#############

.#? ::matrix U\n  reverse the rows of a matrix
def matrix::__reverse__ {:& .rows U \.M._new}

.#? ::matrix E\n  the shape of the matrix
def matrix::__len__ {.rows.E\0IEJ}


.#############
.# Iteration #
.#############


.#? ::block ::matrix matrix.apply\n  apply an expression to each element of the matrix in place
def matrix::apply {expr::block self,
    self.rows # {#expr} self.:rows; self
}

.#? ::block ::matrix matrix.map\n  apply an expression to each element of a matrix, return nothing
def matrix::map {expr::block self,
    self.rows #{#expr};
}:map;

.#? ::matrix :# ::block \n  make a copy of the matrix and apply an expression to each element
def matrix::__each__ {expr::block self,
    self.rows$ :#{:#{expr}} self.M! \;
}



.############
.# Indexing #
.############


.# value row column matrix::_set
.# Set the value of a location in a matrix
def matrix::_set {value r::num c::num self,
    value self.rows.[r].:[c]; self
}

.#? matrix::cols\n  return a copy of the matrix columns
def matrix::cols {.rows .T}

.#? ::matrix [rows cols] I\n get an item or a submatrix
def matrix::__getindex__ {ix mat : r c matrix^,
    ix0I :r;
    ix1I :c;

    .# Get the data
    mat.rows r I
    r :T ::num = {A} ?
    #{cI}

    .# Transform the data based on input type
    .# Return a new matrix if possible
    c :T ::num = {
        r :T ::num = {
            .# `r` and `c` both nums, return a single item
            0I
        } {
            .# Only columns returned, wrap each in a list
            #A matrix!
        } .?
    } {
        .# Only rows returned, convert to matrix
        matrix!
    } .?
}

def matrix::__setindex__ {val ix self : r c matrix^,
    {
        (ix :T ::matrix =) {
            val :T ::matrix = {val.rows :val;} ?
            val :T ::list = {
                val self.rows ix.rows [3|,D];
            } {
                self.rows ix.rows {val @@ D} .&;
            } .?
            self
        } (ix :T ::list =) {
            val ix.[0] ix.[1] self._set
        } {
            "TypeError: Invalid operation $(other:T) $(self.T) *" .D
        }
    } :?
}

.##############
.# Generators #
.##############

.#? N matrix.eye\n  generate an Nd identity matrix
def matrix::eye {matrix,
    $0\L1\:J\$:JL  matrix._new
}

.# generates the next row of a pascal matrix
def matrix::_nextpascal {prev::list matrix : new len ix,
    prevE:len;
    1 0 lenVL:J:new;
    1:ix;
    {prev ixI new ixVI+ new.:[ix]; ::ix B}lenV%
    new
}

.#? I matrix.pascal\n  generate an I by I matrix representation of pascal's triangle
.{ Example:
    aya> 4 matrix.pascal
    [[ 1 1 1  1  ]
     [ 1 2 3  4  ]
     [ 1 3 6  10 ]
     [ 1 4 10 20 ]]
.}
def matrix::pascal {n::num matrix,
    [1 n L {$matrix._nextpascal} n V %] matrix._new
}

.#? [rows cols] matrix::R\n  generate a matrix counting up from 1
def matrix::__range__ {l::list matrix,
    l~*R l L matrix!
}

.#? [rows cols] matrix.random\n  create a N1 by N2 matrix of random values [0,1]
def matrix::__random__ {matrix,
    0\L :#{:#{;.Q}} matrix._new
}

.# rows::num cols::num matrix._newfill\n  create a I1 by I2 matrix filled with N3
def matrix::_newfill {matrix, \L\Lmatrix._new}

.#? [rows cols] matrix.ones\n  create a N1 by N2 matrix of ones
def matrix::ones  {matrix, ~ 1 matrix._newfill}

.#? [rows cols] matrix.zeros\n  create a N1 by N2 matrix of zeros
def matrix::zeros {matrix, ~ 0 matrix._newfill}

.#? value::num [rows cols] matrix.full\n  create a rows x cols matrix filled with value
def matrix::full {value::num shape::list matrix,
    shape.[0] shape.[1] value matrix._newfill
}



.#? ::matrix.comma_str\n  print the matrix in list with comma format
def matrix::comma_str {.rows :#{ "," % "[" \+"]"+} "," % "["\+ "]"+}
