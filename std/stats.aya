require math {cumsum}

.#? ::list stats.mean\n  average of a list of numbers
def ::mean {
    .E\W\/
}


.#? ::list stats.variance\n  population variance
def ::variance {set : m mean^,
    set mean:m;
    set#{m- 2^} W setE /
}


.#? L stats.stdev\n  standard deviation
def ::stdev {: variance^,
    variance .^
}


.#? ::list stats.geomean\n  geometric mean
.# the nth root of the product of n numbers
.# compute by summing the logarithms of the values
def ::geomean {
    Ml.E\W\/Me
}


.#? L stats.median\n  median value of a list
def ::median {l,
    lC$E2/.\        .# Sort the list and get its middle index
    lE2:%0= {        .# If the list has even length,
        $1-:JIW2/    .# average the middle two
    } {
        I           .# else, take the middle item
    }  .?
}


.#? ::list ::list stats.regression\n  return a block that evaluates to the regression of the sets
def ::regression {x y :
    n a b
    sumy sumx
    sumxsq
    sumxytimes,

    xE:n;
    x2#^W:sumxsq;
    [x y,*]W:sumxytimes;
    xW:sumx;
    yW:sumy;


    sumy sumxsq *  sumx sumxytimes * -
    n sumxsq * sumx2^ -
    /:a;

    n sumxytimes * sumx sumy * -
    n sumxsq * sumx2^-
    /:b;

    {b * a +} [::a ::b] .+
}


.#? ::list ::list stats.pearson\n  pearson correlation coefficient between 2 datasets
def ::pearson {x y : n xs ys,
    xE:n;
    xW:xs;
    yW:ys;

    [x y,*]Wn* xs ys*-
     x2^Wn* xs2^ -
     y2^Wn* ys2^ -
     * .^
    /
}

def ::hist {l::list nbins::num : min max bin_size bins counter cumsum^,
    .# compute bin size using list min and max values
    l.min :min;
    l.max :max;
    max min - nbins / :bin_size;

    .# generate list of bins
    .# for example, if 2:bin_size, 1:min, 5:nbins
    .#    [ 3 5 7 9 11 ] :bins
    bin_size nbins L cumsum min + :bins;

    .# Set last bin to max value (prevent rounding errors)
    max bins.:[-1];

    .# Create a list of counters
    [nbins,; 0] :counter;

    .# Map each item to it's bin index
    l #{bins>W}
    .# count all bin indices
    :# {i, counter.[i] 1 + counter.:[i]};

    counter
}
