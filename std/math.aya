.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# math.aya
.# Essential math functions for Aya

.#############
.# Constants #
.#############


:1c :e;    .#? euler: euler's constant e
:0c :pi;       .#? pi:  constant \{pi}
:4c :nan;      .#? nan:  not a number double literal
:5c :inf;      .#? inf:  infinity double literal
:6c :minf;     .#? minf:  minus infinity double literal
:1r4:fourth;   .# ¼
:1r2:half;     .# ½

.#? phi: golden ratio (constant)
.# Compute phi using 2 adjacent fib numbers
[1000 $B, 1\0{$@+}@%;]$1I\0I/
:phi;




.########################
.# Vectorized Functions #
.########################


{.|}:abs;           .#? N abs\n  absolute value
{1 3/^}:cbrt;       .#? N cbrt\n  cube root
{./}:ceil;          .#? N ceil\n  ceiling
{pi*180/}:deg;      .#? N deg\n  convert deg to rad (180° => 3.14..)
{180*pi/}:rad;      .#? N rad\n  convert rad to deg (pi rad => 180)
{Me}:exp;           .#? N exp\n  exp(x)
{M!}:fact;          .#? N fact\n  factorial
{.\}:floor;         .#? N floor\n  floor
{ML2ML/}:lg;        .#? N lg\n  base-2 log
{Ml}:ln;            .#? N ln\n  natural log
{ML}:log;           .#? N log\n  base-10 log
{:%}:mod;            .#? N mod\n  modulo
{Mp}:primes;        .#? N primes\n  returns a list containing the primes up to and including N
{.!}:signnum;       .#? N signnum \n  returns the sign of a number (1,0,-1)
{.^}:sqrt;          .#? N sqrt\n  square root
{.%}:div;           .#? <NN> div\n  integer division
{%}:rem;            .#? <NN> rem\n  remainder after division
{PE}:numofdigits;   .#? N numofdignts\n  number of digits in N

.# Binary vectorized functions
{2^\2^+.^}:hypot;   .#? N hypot\n  hypotenuse function
{ML\ML\/}:logn;     .#? N logn\n  base-n log\n ex: log base 6 of 10 written as (10 6logn)


.###################
.# List Operations #
.###################

{:&2^W.^/}:normal;   .#? L<N> normal\n  compute the normal vector of the given list
{{*}/}:product;     .#? L product\n  product of a list
{*W}:vdot;           .#? LL vdot\n  vdot product of two vectors
{2^W.^}:norm;       .#? L norm\n compute the vector norm


.#? NN lcm\n least common multiple of two numbers or a list of numbers
{:& num :@ {.-}{{.-}/} .?}:lcm;

.#? NN gcd \n  greatest common divisor of 2 numbers or a list of numbers
{:& num :@ {.+}{{.+}/} .?}:gcd;

.#? L<N> cumsum\n  cumulative summation of a list
.{
{list : sum outlist,
    .# Allocate output list
    0 listE L :outlist;

    list.irange # {i,
      list iI sum + : sum;
      sum outlist i D
    };

    outlist
}:cumsum;
.}
{l,lER:#{l\.<W}}:cumsum;



.#? L<N> cumprod\n  cumulative product of a list
.{
{list : prod outlist,
    .# Initialize prod
    1:prod;

    .# Allocate output list
    0 listE L :outlist;

    list.irange # {i,
        list iI prod * : prod;
        prod outlist i D
    };

  outlist
}:cumprod;
.}
{l,lER:#{l\.<{*}/}}:cumprod;






.################
.# Trigonometry #
.################

{Ms}:sin;                   .#? N sin \n  sine
{Mc}:cos;                   .#? N cos \n  cosine
{Mt}:tan;                   .#? N tan \n  tangent
{Ms1\/}:csc;                .#? N csc \n  cosecant
{Mc1\/}:sec;                .#? N sec \n  secant
{Mt1\/}:cot;                .#? N cot \n  cotangent

{MS}:asin;                  .#? N asin \n  inverse sine
{MC}:acos;                  .#? N acos \n  inverse cosine
{MT}:atan;                  .#? N atan \n  inverse tangent
{1\/MS}:acsc;               .#? N acsc \n  inverse cosecant
{1\/MC}:asec;               .#? N asec \n  inverse secant
{1\/MT}:acot;               .#? N acot \n  inverse cotangent

{$Me\KMe- 2/}:sinh;          .#? N sinh \n  hyperbolic sine
{$Me\KMe+2/}:cosh;          .#? N cosh \n  hyperbolic cosine
[{$} sinh.` {\}
     cosh.` {/}].* :tanh;   .#? N tanh \n  hyperbolic tangent
[sinh.` {1\/}].* :csch;     .#? N csch \n  hyperbolic cosecant
[cosh.` {1\/}].* :sech;     .#? N sech \n  hyperbolic secant
[tanh.` {1\/}].* :coth;     .#? N coth \n  hyperbolic cotangent

{$2^1+.^+Ml}:asinh;             .#? N asinh \n  inverse hyperbolic sine
{$$1-.^\1+.^*+Ml}:acosh;        .#? N acosh \n  inverse hyperbolic cosine
{$1\+Ml\1\-Ml- .5*}:atanh;      .#? N atanh \n  inverse hyperbolic tangent
{$1\/\2^1\/1+.^+Ml}:acsch;      .#? N acsch \n  inverse hyperbolic cosecant
{1\/$$1+.^\1-.^*+Ml}:asech;     .#? N asech \n  inverse hyperbolic secant
{1\/$1\-Ml\1+Ml\- .5*}:acoth;   .#? N acoth \n  inverse hyperbolic cotangent



.#? ::list makepoly\n  generate a polynomial function with the given coefficients
.{ Examples:
    aya> [1 0 4 5] makepoly :f
    {[ 3 2 1 0 ] ^ [ 1 0 4 -5 ] * W}
    aya> 5 f
    140
    aya> [2 0] makepoly :double
    {[ 1 0 ] ^ [ 2 0 ] * W}
    aya> [4,double]
    [ 2 4 6 8 ]
.}
.# {.E .R U :{2, :c ; :p} {p ^ c * W} \ .+}:makepoly;
{ [1| .E .R U {^} \ {*W} ].* }:makepoly;



.#############################
.# Additional Math Functions #
.#############################

.# BASE

{2 10  .&}:unbit;   .#? L unbit \n  convert a list of bits to a number
{10 2  .&}:bits;    .#? N bits \n  convert a positive number to a list of bits
{10 16 .&}:hex;    .#? N hex\n  convert an int into a hex string
{16 10 .&}:unhex;  .#? S unhex\n  convert a hex string to an int



.# COMBINATORICS

{G}:isprime;                   .#? N isprime \n  tests a number for primality
{n r, nM! n r-M!/}:npr;        .#? NN npr\n  permutations
{n r, nM! n r- M!/ rM!/}:bin;  .#? NN bin\n binomial (combinations)

.#? N divisors \n  returns a list of the numbers factors
{n, [1 n,, n\:%0=]}:divisors;

.#? N factors\n  compute a number's prime factors
.# golf: {n,{2to(nV){n\:%0=}.NI$n\/f:J}{n}nGn2<|?}:f;
{n,
    .# is the number prime
    nG n2< |

    .# If the number is prime, return it
    {[n]}

    .# If the number is not prime, find the
    .#   next factor
    {
        .# Range from 2..ceil(sqrt(n))
        [2nV.^./]R

        .# Find the next factor
        {n\:%0=}.N

        .# Append this factor to the list of
        .#   factors recursively
        I $n\/ factors :J
    }

    .?
}:factors;

