.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# map.aya
.# Defines the map data structure

.{? class: map
    The map type is a key-value pair dictionary which supports any
      and mixed data types as the key.
.}

class map
export ::map

def map::__init__ {self,
    [] self.:keys;
    [] self.:values;
}


.#? key map.haskey\n  true if map contains key
def map::haskey {key self,
    self.keys key H
}


.#? key value self map.put\n  put key value pair in the map
def map::put {value key self : idx,
    self.keys key N :idx;;
    idx 0 < {
        key self.keys .B;
        value self.values .B;
    } {
        value self.values.:[idx];
    } .?
}


.#? key ::map.del\n  remove the key value pair from thist list
def map::del {key self,
    .# Apply remove code only if it is in the map
    self.keys key N $ 0 :> {
        $@\.-;              .# remove from keys
        self.values\.-;     .# remove from values
    } {
        ;;                  .# do nothing, clean stacke
    } .?
}


.#? key map.getindex\n  get the value for the key in the map
def map::__getindex__ {key self : idx,
    self.keys key N :idx;;
    idx 0 < {
        "map does not contain key $key" .D
    } {
        self.values.[idx]
    }.?
}

.#? ::block ::map.__each__\n  apply the block to each key value pair
.{ Example:
aya> [[1 "one"][2 "two"]] map.fromlist :m
:{
  [ 1 2 ]:keys;
  [ "one" "two" ]:values;
}
aya> m :# {k v, v.upper k m.put}
aya> m
:{
  [ 1 2 ]:keys;
  [ "ONE" "TWO" ]:values;
}
aya> m :# {k v, "$k = $v" :P}
1 = ONE
2 = TWO
.}
def map::__each__ {blk self,
    [self.keys self.values] .T :# {~ blk} ;
}


def map::fromlist {list map : m,
    map!:m;
    list # {~ \m.put};
    m
}
