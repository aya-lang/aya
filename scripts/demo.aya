.# demo.aya
.# example functions

import "plot"
import "color"
import "list"
import "math"
import "data"
import "dialog"
import "golf"

.#? module: demo\n  contains various example functions
{,
  .#? N demo.train\n  generates an ASCII train with N carts
  {n::num, [" ______  ""|      | "" ()--() ~"]#{nLSV;'\n'+}S.P}:train;

  .#? demo.additiontbl\n  generate and print an addition table
  {6r_ì¶¦¥}:additiontbl

  .#? demo.loc\n  input a C source file and return the number of lines of code
  {"".UG"/\\*[^/]+\\/|[\\n|\\t+|\\s+]//.+"|S".+"&{_E\"[\\t|\\s]"&E=!}IE}:loc;

  .#? N demo.wall\n  print a wall
  {[1|,;"\{pi}\{ppi}"Q].P}:wall;

  .#? demo.sinsrs\n  plot a sin series with coefficients
  {:d,

    [0dy4pi*]R:d;

    plot!:plt;
    d plt.domain
    for 'n (4R) {
      nP 1 [] {x,[nR [nR,x*Ms],*]S} plt.addexpr
    };
    "Demo: Sine Series" plt.:title
    2 plt.:stroke
    [0 pi4*] plt.:xaxis

    plt.view
   }:sinsrs;

  .#? demo.rainbow\n  generate a rainbow
  {:p mul s,
    plot!:p;
    0 0.9+ pi 0.9- 600.1 linspace p.domain
    [0.857 1.1] p.:yaxis

    0.011:mul;
    16:s;

    "" s colors.violet.rgb {Ms 1 mul* +} p.addexpr
    "" s colors.indigo.rgb {Ms 2 mul* +} p.addexpr
    "" s colors.blue.rgb   {Ms 3 mul* +} p.addexpr
    "" s colors.green.rgb  {Ms 4 mul* +} p.addexpr
    "" s colors.yellow.rgb {Ms 5 mul* +} p.addexpr
    "" s colors.orange.rgb {Ms 6 mul* +} p.addexpr
    "" s colors.red.rgb    {Ms 7 mul* +} p.addexpr

    p.view
  }:rainbow;

  .#? demo.fnplot\n  a sample function plot
  {:p,
    plot!:p;

    .# The domain
    0 2pi* 600 linspace p.domain

    .# Add each function
    "sin" 2 colors.red.rgb    {sin} p.addexpr
    "cos" 2 colors.blue.rgb   {cos} p.addexpr
    "ln"  2 colors.orange.rgb {ln} p.addexpr

    .# Plot title
    "A Sample Expression Plot" p.:title

    .# Other plot parameters
    [(-2) 2] p.:yaxis
    [0 2pi*] p.:xaxis
    1        p.:legend
    "f(x)"   p.:ylabel
    400      p.:width
    300      p.:height

    .# Open the plot window
    p.view

    .# Uncomment to save the plot
    .# "sample_plot.png" p.save

  }:fnplot;

  .#? demo.scatter\n  a simple scatter plot
  {:p,
    100R:x [x,.Q70*+] plot.scatter:p
    "A Scatter Plot" p.:title

    p.view
  }:scatter;

  .#? demo.sumprimes\n  generate a list of prime numbers where each number is also the sum of all the prime numbers below it
  {1000 primes cumsum {isprime} I}:sumprimes;


  .#? demo.colorsort\n  comparison of various color sorting methods
  {:c srtprt,

    [{colorsQ}100%]:c;

    {name clrs fn,
      "$name:\t".P clrs {fn} .$ #{'\block'\.print0};
      ""println
    }:srtprt;

    .# mean
    "mean" c {.rgb avg} srtprt

    .# Geometric mean
    "geomean" c {.rgb geomean} srtprt

    .# Sum of the squares
    "sum of sq" c {.rgb #2^S} srtprt

    .# Sum of the values raised to the 5th power
    "sum of ^5" c {.rgb #5^S} srtprt

    .# Percieved luminosity
    "lum" c {.rgb [1|[0.2126 0.7152 0.0722],*]S} srtprt

    .# Most accurate representation for percieved luminosity
    "lum2" c {.rgb [1|[0.299 0.587 0.114],*2^]SMq} srtprt

    .# Quick estimation for percieved luminocity
    .# (R+R+B+G+G+G)/6
    "qlum" c {:r g b, .rgb~:b;:g;:r; [r r b g g g] S} srtprt

  }:colorsort;

  .#? demo.lakehuron\n  plot lake huron water levels over time with regression
  {:time level plt reg,

    [[] "time"] data.lakehuron .get :time;
    [[] "LakeHuron"]  data.lakehuron .get :level;

    plot!:plt;
    time plt.domain
    "Level of Lake Huron" plt.:title
    "Year" plt.:xlabel
    "Level" plt.:ylabel
    [level min 2- level max 5+] plt.:yaxis

    level plt.addline

    time level regression:reg;
    "" 1 [] {reg} plt.addexpr
    plt.view
  }:lakehuron;

  .#? S demo.sc\n  returns the closet english word to the input
  {w, data.words {w^} .$ V\;}:sc;

  .#? demo.spiro\n  generate a parametric spiral
  {
    [0dy100,]:x;
    x#{x,xMs xMs 1 2/*-}
    x#{x,x17 8/*Mc xMc-}
    plot.line.view
  }:spiro;

  .#? demo.randomwalk\n  plot a random walk
  {:vec step,
    .# Move the x and y values by 0,-1, or +1
    {v, v.x 3QV+ v.:x; v.y 3QV+ v.:y;}:step;

    .# Start at (0,0)
    {,0:x 0:y}:v;
    .# Record each step in a list, step 20000 times
    [] {v step [v.x v.y]\.V} 20000 %
    .# Transpose the list and plot the line
    transpose~ plot.line.view
  }:randomwalk;

  .#? demo.lorenz\n  plot a Lorenz attractor
  {:x y z a b c dt,

    .# Starting parameters
    0.01 :x;
    0.1  :y;
    0.3  :z;
    10   :a;
    28   :b;
    8`/3 :c;
    0.01 :dt;

    .# List to keep track of state
    []

    {
      .# Update the point
      [
        y x - a * dt* x+:x
        b z - x * y - dt* y+:y
      ]
      x y * c z * - dt* z+:z;

      .# Append to state list
      \.B
    } 5000 %

    .# Transpose to separate list of x and y values
    transpose ~ plot.line.view
  }:lorenz;

  .#? demo.loading\n  play a loading animation for a few seconds
  {
    "Loading..." .P
    "-\|/" {roll 0.I .P 300:Z '\b'.P} 20 %;
    "":P
  }:loading;

  .#? demo.sci\n  interactive spell check: request a word from the user and output the top 10 closest words
  {:w, "Enter a word:" dialog.requeststr#tolower:w; data.words {w^}.$10.< [1|.ER,\AK] matstr.P}:sci;

  .#? demo.getverse\n  fetch a verse using esvapi.org rest api
  {vs : ref out,
    .# URL encode the verse
    " " "%20" vs .& :ref;

    .# Create the url and download the web file
    ["http://www.esvapi.org/v2/rest/passageQuery"
     "?key=IP"
     "&passage=$ref"
     "&include-verse-numbers=1"
     "&include-headings=0"
     "&include-footnotes=0"
     "&output-format=plain-text"
    ]S
    G:out;

    .# Make sure the verse does not return an error
    out "ERROR" N :1 = {
      .# Trim the header
      out out "[" N | \; :out;

      .# Remove newlines
      "\n" " " out .& :out;

      .# Format for single line output
      "\s\s+" " " out .&
    } {
      "Cannot find verse: $vs"
    } .?

  }:getverse;

}:demo;

{:demolist choice,
  [
  "randomwalk"
  "sinsrs"
  "spiro"
  "lakehuron"
  "rainbow"
  "colorsort"
  "scatter"
  "fnplot"
  "lorenz"
  "loading"
  ]$  "Select a Demo" "Aya Demo" 1 6 MV :choice;

  "demo." choice + ~

}:demos;
