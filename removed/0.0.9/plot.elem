{@ plot,

  {@axis, 
    attr "min max"
    {minN maxN,
      [min max] plot.axis MO
    }:new;
    {F}:eq;
  }
  
  .# Plot types
  0:tline;     .#? plot.tline\n  line plot type id
  1:tscatter;  .#? plot.tscatter\n  scatter plot type id

  """
    type
    width
    height
    title
    xlabel
    ylabel
    legend
    xbounds
    ybounds
    xvals
    series
    stroke
  """:fieldnames;

  attr fieldnames


  .#? plot.new\n  create a new plot instance with default settings
  {:plt,
    [plot.fieldnamesE,0] plot MO :plt;
    
    plot.tline  plt.settype
    500         plt.setwidth
    400         plt.setheight
    ""          plt.settitle
    ""          plt.setxlabel
    ""          plt.setylabel
    []          plt.setxvals
    []          plt.setseries
    T           plt.setlegend
    0           plt.setxbounds
    0           plt.setybounds
    1!          plt.setstroke .# Use individual strokes
    
    plt
  }:new;

  .#? (plot) plot.view\n  view the plot in a new window
  {self,
    self.propertylist MX
  }:view;

  .#? S (plot) plot.save\n  save the plot as a PNG in the working directory with the name S
  {filenameS self,
    self.propertylist _ .# dup: don't change the propertylist
    ["show" F] AK
    ["filename" filename] AK
    MX;
  }:save;

  .#? L<N> (plot) plot.addline\n  add a dataset to the plot using defaults
  {listL self,
    "" 1 [] list self.addseries
  }:addline;

   .#? L<N> (plot) plot.domain\n  set the domain of the plot
  {dataL self,
    data self.setxvals
  }:domain;
  
  .#? nameS strokeN colorL dataL (plot) plot.addseries\n  add a series to a plot
  {nameS strokeN colorL dataL self,
    .# stroke 0 = then {self.stroke :stroke;}
    self.series [name stroke color data] AK;
  }:addseries;
  
  .#? nameS strokeN colorL exprE (plot) plot.addexpr\n  evaluate the expression on the domain of the plot and add it as a series
  {nameS strokeN colorL exprE self,
    self.series [name stroke color [self.xvals, expr]] AK;
  }:addexpr;
  
  .#? minN maxN (plot) plot.setxaxis\n  set the horizontal min and max values
  {minN maxN self,
    min max plot.axis! self.setxbounds 
  }:setxaxis;
  
  .#? minN maxN (plot) plot.setyaxis\n  set the vertical min and max values
  {minN maxN self,
    min max plot.axis! self.setybounds 
  }:setyaxis;
  
  .# domainL rangeL plot.scatter\n  return a scatter plot with the given domain and range
  {domainL rangeL : plt,
    plot!:plt;
    plottype.scatter plt.settype
    domain plt.domain
    range plt.addline
    plt
  }:scatter;
  
  .#? domainL rangeL plot.scatterreg\n  plot a scatter plot and a regression plot. print the regression to the console
  {xL yL : reg,
    x y regression :reg;
    x y plot.scatter.view
    x [x,reg] plot.line.view
    "Regression: y= $(1reg0reg-)x + ($(0reg))".P
  }:scatterreg;
  
  .# domainL rangeL plot.line\n  return a line plot with the given domain and range
  {domainL rangeL : plt,
    plot!:plt;
    domain plt.domain
    range plt.addline
    plt
  }:line;

  .#? munN maxN eE plot.fn\n  plot the function e on the domain (min, max). return a plot instance
  {minN maxN exE : plt,
    plot!:plt;
    minMd maxMd 600.1 linspace plt.domain
    "" 1 [] {ex} plt.addexpr
    plt
  }:fn;
  
  .#? minN maxN exsL plot.fns\n  plot each function in exs on the domain (min, max). return a plot instance
  {minN maxN exsL : plt,
    plot!:plt;
    minMd maxMd 600.1 linspace plt.domain
    for 'x exs {
      "" 1 [] {x} plt.addexpr
    };
    plt
  }:fns;
  
  
  {"Plot Instance"}:show;

  
  .###################
  .# UTIL FUNCTIONS
  .###################

  .# return a property list for this plot
  {self,
    [
      ["width" self.width]
      ["height" self.height]
      ["title" self.title]
      ["xlabel" self.xlabel]
      ["ylabel" self.ylabel]
      ["legend" self.legend] 
      ["type" self.type]
      
      self.xbounds 0=! then {
        ["xaxis" [self.xbounds.min self.xbounds.max]]
      }
        
      self.ybounds 0=! then {
        ["yaxis" [self.ybounds.min self.ybounds.max]]
      }
      
      self.stroke 1!=! then {
        ["stroke" self.stroke]
      }

      ["x" self.xvals]
      ["y" self.series]
    ]
  }:propertylist;

} .# END plot

{@plottype,
  0:line;
  1:scatter;
}




.{? scatter plot example
  [10,.Q] [10,.Q] plot.scatter :p;
  "A Scatter plot" p.settitle
  p.view
.}

.{? line plot example
  10R _#Mq plot.line :p;
  3 p.setstroke
  p.view
.}
