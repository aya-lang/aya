.# This file tests the core language features. For testing modules or
.#   other aya code, see base/test.aya

"Test file loaded!\n" .P

.#? E assert L\n  Evaluates E as a list, throws an error if [E~] != L
{
    {~\ [1|] [1|{{~}O}] .B .* test.test }0:`
} :assert;

{blk::block,
    .; .# Clear stack
    {blk} {;::__fail} .K .A [::__fail] =! {
        "assertfail: code $(blk.`) should have failed but did not" .D
    } ?
}:assertfail;

{1} assert [1]
{ "fail".D } assertfail

{fname,
    :{ 
    "* Running tests '$fname'..." :P
    "$(:(sys.ad))$fname.aya" :F
    "  Tests complete: '$fname'" :P
    };
}:load_test;

.# Run tests in their own scope
"test/core" load_test
"test/list" load_test
"test/ops" load_test
"test/dot_ops" load_test
"test/colon_ops" load_test
"test/range" load_test
"test/repr" load_test
"test/broadcast" load_test
"test/unicode" load_test
"test/misc" load_test
"test/test_op_overload" load_test
"test/types" load_test
"test/return_types" load_test

.# Base
"test/base/test_sym" load_test
"test/base/test_num" load_test
"test/base/test_char" load_test
"test/base/test_list" load_test
"test/base/test_str" load_test
"test/base/test_block" load_test


.# Std
[
    "color"
    "date"
    "enum"
    "csv"
    "io"
    "json"
    "la"
    "map"
    "matrix"
    "set"
    "stats"
    "stack"
] :# {mod,
    :{ "test/std/test_$mod" load_test };
};

.# Import entire standard library
"Importing standard library..." :P
:(sys.ad) "/std"+ :(sys.readdir):# {
    ".aya".^ S W
} :# {name,
    "importing $name...":P 
    name __aya__.importlib.import
} ;
"Import finished!" :P
"":P

"test/golf/golf_examples" load_test

.# Also load and auto-run many examples
"test/examples" load_test

"test/lib/lib" load_test
