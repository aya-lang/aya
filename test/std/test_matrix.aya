
{m,

[

.#{ [[1 2][3 4]] m._is_valid_list 1 }
.#{ [[1][3 4]] m._is_valid_list 0 }
{ [[1 2][3 4]]m! .issq 1 }
{ [[1 2]]m! .issq 0 }
{ [[1 2][3 4]]m! .tr [1 4] }
{ [[1 2][3 4]]m! .t .rows  [[1 3][2 4]]  }
{ [[1 2][3 4]]m! .min  1  }
{ [[1 2][3 4]]m! .max  4  }
{ [[1 2][3 4]]m! .max  4  }
{ [[1 2][3 4]]m! .norm 2.fixed.rows  [[.18 .36][.54 .73]]  }
{ [[1 2][3 4]]m! .sum  10  }
{ [[1 2][3 4][5 6]] m! [[7][8][9]] m! .hcat .rows  [[1 2 7][3 4 8][5 6 9]]  }
{ [[1 2 3][4 5 6]] m! [[7 8 9]] m! .vcat .rows  [[1 2 3][4 5 6][7 8 9]]  }

.# Transformation
{ 1  [3 2] mR .rotate_rows .rows  [[ 5 6 ] [ 1 2 ] [ 3 4 ]]  }
{ -1 [3 2] mR .rotate_rows .rows  [[ 3 4 ] [ 5 6 ] [ 1 2 ]]  }
{ 2  [3 2] mR .rotate_rows .rows  [[ 3 4 ] [ 5 6 ] [ 1 2 ]]  }
{ 8  [3 2] mR .rotate_rows .rows  [[ 3 4 ] [ 5 6 ] [ 1 2 ]]  }
{ 1  [2 3] mR .rotate_cols .rows  [[ 3 1 2 ] [ 6 4 5 ]]  }
{ -1 [2 3] mR .rotate_cols .rows  [[ 2 3 1] [ 5 6 4 ]]  }
{ 2  [2 3] mR .rotate_cols .rows  [[ 2 3 1] [ 5 6 4 ]]  }
{ 8  [2 3] mR .rotate_cols .rows  [[ 2 3 1] [ 5 6 4 ]]  }

.# __head__/__tail_
{ [2 2] mR [3 3].< .rows   [[ 1 2 0 ] [ 3 4 0 ] [ 0 0 0 ]]  }
{ [2 2] mR [3 2].< .rows   [[ 1 2 ] [ 3 4 ] [ 0 0 ]]  }
{ [2 2] mR [3 1].< .rows   [[ 1 ] [ 3 ] [ 0 ]]  }
{ [2 2] mR [2 3].< .rows   [[ 1 2 0 ] [ 3 4 0 ]]  }
{ [2 2] mR [1 3].< .rows   [[ 1 2 0 ]]  }
{ [2 2] mR [3 3].> .rows   [[ 0 0 0 ] [ 0 1 2 ] [ 0 3 4 ]]  }
{ [2 2] mR [3 2].> .rows   [[ 0 0 ] [ 1 2 ] [ 3 4 ]]  }
{ [2 2] mR [3 1].> .rows   [[ 0 ] [ 2 ] [ 4 ]]  }
{ [2 2] mR [2 3].> .rows   [[ 0 1 2 ] [ 0 3 4 ]]  }
{ [2 2] mR [1 3].> .rows   [[ 0 3 4 ]]  }

.# pad
{ 2 [1 1]mR.pad .rows [[ 0 0 0 0 0 ]
                       [ 0 0 0 0 0 ]
                       [ 0 0 1 0 0 ]
                       [ 0 0 0 0 0 ]
                       [ 0 0 0 0 0 ]] }
{ 1 [2 2]mR.pad .rows   [[ 0 0 0 0 ] [ 0 1 2 0 ] [ 0 3 4 0 ] [ 0 0 0 0 ]]  }
{ 1 [2 3]mR.pad .rows   [[ 0 0 0 0 0 ] [ 0 1 2 3 0 ] [ 0 4 5 6 0 ] [ 0 0 0 0 0 ]]  }
{ 1 [3 2]mR.pad .rows   [[ 0 0 0 0 ] [ 0 1 2 0 ] [ 0 3 4 0 ] [ 0 5 6 0 ] [ 0 0 0 0 ]]  }

.# Generator
{ [2 3] mR .rows  [[1 2 3][4 5 6]]  }
{ [3 2] mR .rows  [[1 2][3 4][5 6]]  }
{ 1 m.pascal .rows  [[1]]  }
{ 3 m.pascal .rows  [[1 1 1][1 2 3][1 3 6]]  }

.# Overload
{ [[1 2][3 4]]m! E [2 2] }
{ [[1 2 3][4 5 6]]m! E [2 3] }
{ [[1 2][3 4][3 5]]m! E [3 2] }

.# Indexin
{:x, 10 0  0  [[1 2][3 4]]m!:x._set x.rows  [[10 2][3 4]]  }
{:x, 10 -1 -1 [[1 2][3 4]]m!:x._set x.rows  [[1 2][3 10]]  }
{:x, 10 0  1  [[1 2][3 4]]m!:x._set x.rows  [[1 10][3 4]]  }
{:x, 10 1  0  [[1 2][3 4]]m!:x._set x.rows  [[1 2][10 4]]  }

.# __getindex_
{ [3 3] mR.[[2 2]] 9 }
{ [3 3] mR ['* 2] I .rows  [[3][6][9]]  }
{ [3 3] mR [2 '*] I .rows  [[7 8 9]]  }
{ [3 3] mR ['* '*] I .rows  [[1 2 3][4 5 6][7 8 9]]  }
{ [3 3] mR [0 [0 1]] I .rows  [[1 2]]  }
{ [3 3] mR [[0 1] 0] I .rows  [[1][4]]  }
{ [3 3] mR [[0 1] '*] I .rows  [[1 2 3][4 5 6]]  }
{ [3 3] mR ['* [0 1]] I .rows  [[1 2][4 5][7 8]]  }
{ [3 3] mR [[0 1][0 1]] I .rows  [[1 2][4 5]]  }
{ [3 3] mR [[0 0][0 1]] I .rows  [[1 2][1 2]]  }
{ [3 3] mR [[0 0][0 0]] I .rows  [[1 1][1 1]]  }
{ [3 3] mR [[0 1][1 0]] I .rows  [[2 1][5 4]]  }

.# _set
{:x, 0 0 0 [2 2] mR :x ._set; x.rows [[0 2][3 4]] }
{:x, 0 0 1 [2 2] mR :x ._set; x.rows [[1 0][3 4]] }
{:x, 0 1 0 [2 2] mR :x ._set; x.rows [[1 2][0 4]] }
{:x, 0 1 1 [2 2] mR :x ._set; x.rows [[1 2][3 0]] }
{:x, 0  0 -1 [3 3] mR :x ._set; x.rows [[1 2 0][4 5 6][7 8 9]] }
{:x, 0 -1  0 [3 3] mR :x ._set; x.rows [[1 2 3][4 5 6][0 8 9]] }
{:x, 0 -1 -1 [3 3] mR :x ._set; x.rows [[1 2 3][4 5 6][7 8 0]] }
{:x, 0  1 -1 [3 3] mR :x ._set; x.rows [[1 2 3][4 5 0][7 8 9]] }
{:x, 0 -1  1 [3 3] mR :x ._set; x.rows [[1 2 3][4 5 6][7 0 9]] }

.# setindex with list
{:x, 0 [2 2] mR :x .:[[0 0]];   x.rows [[0 2][3 4]] }
{:x, 0 [2 2] mR :x .:[[0 1]];   x.rows [[1 0][3 4]] }
{:x, 0 [2 2] mR :x .:[[1 0]];   x.rows [[1 2][0 4]] }
{:x, 0 [2 2] mR :x .:[[1 1]];   x.rows [[1 2][3 0]] }
{:x, 0 [3 3] mR :x .:[[0 -1]];  x.rows [[1 2 0][4 5 6][7 8 9]] }
{:x, 0 [3 3] mR :x .:[[-1 0]];  x.rows [[1 2 3][4 5 6][0 8 9]] }
{:x, 0 [3 3] mR :x .:[[-1 -1]]; x.rows [[1 2 3][4 5 6][7 8 0]] }
{:x, 0 [3 3] mR :x .:[[1 -1]];  x.rows [[1 2 3][4 5 0][7 8 9]] }
{:x, 0 [3 3] mR :x .:[[-1 1]];  x.rows [[1 2 3][4 5 6][7 0 9]] }

.# setindex single value with mask
{:x, 0 [2 2] mR :x .:[ ([[1 0][0 0]]m!) ]; x.rows [[0 2][3 4]] }
{:x, 0 [2 2] mR :x .:[ ([[1 1][0 0]]m!) ]; x.rows [[0 0][3 4]] }
{:x, 0 [2 2] mR :x .:[ ([[1 1][1 1]]m!) ]; x.rows [[0 0][0 0]] }
{:x, 0 [2 2] mR :x .:[ ([[0 0][0 0]]m!) ]; x.rows [[1 2][3 4]] }

{:x, [2 2] mR $10+\ :x .:[ ([[1 0][0 0]]m!) ]; x.rows [[11 2][3 4]] }
{:x, [2 2] mR $10+\ :x .:[ ([[1 1][0 0]]m!) ]; x.rows [[11 12][3 4]] }
{:x, [2 2] mR $10+\ :x .:[ ([[1 1][1 1]]m!) ]; x.rows [[11 12][13 14]] }
{:x, [2 2] mR $10+\ :x .:[ ([[0 0][0 0]]m!) ]; x.rows [[1 2][3 4]] }

.# +
{ [2 2] mR 1 + .rows [[2 3][4 5]] }
{ [2 2] mR $ + .rows [[2 4][6 8]] }
{ [[1 2 3]] m! $.t + .rows [[ 2 3 4 ] [ 3 4 5 ] [ 4 5 6 ]] }
{ [[1 2 3]] m! $.t \ + .rows [[ 2 3 4 ] [ 3 4 5 ] [ 4 5 6 ]] }

.# *
{ [2 2] mR 2 * .rows [[2 4][6 8]] }
{ [2 2] mR $ * .rows [[1 4][9 16]] }
{ [[1 2 3]] m! $.t * .rows [[1 2 3] [2 4 6] [3 6 9]] }
{ [[1 2 3]] m! $.t \* .rows [[1 2 3] [2 4 6] [3 6 9]] }

.# /
{ [2 2] mR 2 / .rows [[0.5 1][1.5 2]] }
{ [2 2] mR $ / .rows [[1 1][1 1]] }

.# -
{ [2 2] mR 2 - .rows [[-1 0][1 2]] }
{ [2 2] mR $ - .rows [[0 0][0 0]] }

.# ^
{ [2 2] mR 2 ^ .rows [[1 4][9 16]] }

.# .|
{ [[-3 0][-1 3]] m! .| .rows [[ 3 0 ] [ 1 3 ]] }

.# comp <, >, :<, :>
{ [2 2] mR 3 <  .rows [[ 1 1 ] [ 0 0 ]] }
{ [2 2] mR 3 >  .rows [[ 0 0 ] [ 0 1 ]] }
{ [2 2] mR 3 :< .rows [[ 1 1 ] [ 1 0 ]] }
{ [2 2] mR 3 :> .rows [[ 0 0 ] [ 1 1 ]] }

.# eq
{ 3 [[1 2 3]] m! ._eq_num .rows [[ 0 0 1 ]] }
{ 3 [[3 2 3]] m! ._eq_num .rows [[ 1 0 1 ]] }
{ 0 [[3 2 3]] m! ._eq_num .rows [[ 0 0 0 ]] }
{ [2 2] mR $ ._eq_mat 1 }
{ [[1 2][3 4]]m! [[1 1][3 4]]m! ._eq_mat 0}

] :# { test.test }

}:test_matrix;


:{
require matrix {matrix}

matrix test_matrix
};
