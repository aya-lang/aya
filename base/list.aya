.# This file is a part of aya: https://github.com/aya-lang/aya

.# Metatable definition for the built-in `list` type

:{
    .# Querying
    .###############

    .#? ::any ::list .in\n  tests whether or not item is in the list
    {\H}:in;

    .#? ::list .max\n  max value of a list
    {{.<}%}:max;

    .#? ::list .min\n  min value of a list
    {{.>}%}:min;

    .#? ::list .argmax\n  return the index of the largest value in the list
    {$.maxN\;}:argmax;

    .#? ::list .argmin\n  return the index of the smallest value in the list
    {$.minN\;}:argmin;

    .#? ::list ::list .i\n  index using mask
    {.ER*{0=!}I1#- .E0={;;[]} {.E@@I\ 1={A}?} .?}:i;

    .#? ::list ::list.mask\n  select indices with non-false values from list
    .{
        aya> [1 2 3 4 5] [0 1 0 0 1].mask
        [ 2 5 ]
    .}
    {a b,
        aE bE = {
            a b .E R * .[{0=!}] 1- I
        } {
            "::list.mask: both lists must be the same length" .D
        } .?
    }:mask;

    .#? ::list.alleq\n  return true if all items in the list are the same
    {:~E1:<}:alleq;

    .#? ::list .allt\n  true if all elements in list are true
    {{&}%}:allt;

    .#? ::list .allf\n  true if all elements in list are false
    {{|}%!}:allf;

    .# Convenience functions for using a list as a vector
    {.[0]}:x;
    {.[1]}:y;
    {.[2]}:z;
    {.:[0]}:setx;
    {.:[1]}:sety;
    {.:[2]}:setz;


    .# Manipulation
    .###############


    .#? ::any ::list .append\n  add item to end of list
    {.B}:append;

    .#? ::list .pop\n  remove item from end of list
    {B}:pop;

    .#? ::list .roll\n  move the last element to the front
    {B\.V}:roll;

    .#? ::num ::list .rotate\n  shift items in list up N times wrappping the items around
    .{ Example:
        aya> 1 [1 2 3 4].rotate
        [ 4 1 2 3 ]
        aya> 2 [1 2 3 4].rotate
        [ 3 4 1 2 ]
        aya> -1 [1 2 3 4].rotate
        [ 2 3 4 1 ]
    .}
    {
        .E@-        .# inverse so rotate in correct direction 2 5R => 3
        \.E@\:%     .# force bounds: n % length
        S ~ \ :J    .# Split, swap, and rejoin
    }:rotate;


    .#? ::num ::num ::list .swap\n  swap two elements in a list given their indices
    {i::num j::num l::list: tmp,
        l i I : tmp;
        l j I  l i D;
        tmp l j D
    }:swap;


    .#? ::list .shuffle\n  shuffle a list
    {{;.Q}.C}:shuffle;


    .#? ::list .makesquare\n  make all lists in the given 2d lists the same length
    {list,
        list$ #E {.<} %
        #.<
    }:makesquare;


    .# Generators
    .#############

    .#? ::list.r\n  multidimentional range
    .{ Example:
        aya> [2 3].r
        [ [ 1 2 3 ] [ 4 5 6 ] ]
    .}
    {${*}%R\L}:r;

    .#? ::list.zeros\n  generate a [N1 x N2 x ...] list of zeros
    .#? ::list.ones\n  generate a [N1 x N2 x ...] list of ones
    .{? Example:
        aya> [2 3].zeros
        [ [ 0 0 0 ] [ 0 0 0 ] ]
        aya> [4].ones
        [ 1 1 1 1 ]
    .}
    {${*}%0\L\L}:zeros;
    {${*}%1\L\L}:ones;

    .#? ::any ::num ::list .lpad\n  left pad list using ::any to a max length of ::num
    { .E @ \- 0.< @\L\J }:lpad;
    .#? ::any ::num ::list .rpad\n  left pad list using ::any to a max length of ::num
    { .E @ \- 0.< @\L J }:rpad;

    .#? ::list ::num .pad\n 2d padding
    {n l, l:En+$n+\~ l\#.>\.> \~@ \#.<\.<}:pad;


    .#? ::any ::list .surround\n  append A to the front and back of L
    {$\; \$@J\J}:surround;

    .#? ::list .enumerate\n  return a list of index-value pairs for the list
    {.E.R{A.B}.&}:enumerate;

    .#? ::list .rank\n  rank a list from highest to lowest
    {${>}.pu#W1+}:rank;

    .#? ::list .irange\n generates a range of indices for the list
    {E.R}:irange;



    .# OTHER UTILITIES
    .##################

    .#? ::list.dict_flatten\n  given a list of dicts, flatten the into a single dict
    {
        :{}\J{.+}%
    }:dict_flatten;


    .#? ::list .matstr\n  convert a 2d list into a string with evenly spaced columns
    .{ Example:
        aya> [["A" "B" "CCC"]["D" "EE" "F"]] .matstr :P
        A B  CCC
        D EE F
        aya> [["A" pi "CCC"]["hello world" "EE" 2]] .matstr :P
        A           3.14159265 CCC
        hello world EE         2  
    .}
    def ::matstr {m : colmax,
        m :#{#{PE}}.T:#{{.<}%}:colmax;      .# The max width for each column
        m .T colmax {#{\P\ B.<}} .& .T      .# For each colum, convert to string with
                                            .# padding equal to the max for that column + 1
        :#{WB;}                             .# Combine each row into a single string, remove trailing space
        '\n' %                              .# Join with newlines
    }

    {\.S}:rotate_rows;
    {\0\J.S}:rotate_cols;
}
.# Merge with list metatable
[] .M \.+


.# Removing .I, can directly swap for this
{\:&@I}:dot_i;
