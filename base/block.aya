:{

    .# Functional Operations
    .########################

    .#? ::list ::list ::block.pu\n  (permusing) permutes elements of two lists and applies an expression to each
    .{ Example:
        aya> "AB" "ab" {P+}.pu
        [["Aa" "Ab"]["Ba" "Bb"]]
        aya> [1 2 3][4 5 6] {P+}.pu
        [[4 5 6][8 10 12][12 15 18]]
    .}
    {la lb ex, [lb la lbEL,\#{ex}]}:pu;


    .#? ::list ::block.tw\n  (takewhile) take from list while the condition is satisfied
    .{ Example:
        aya> 10R {5<}.tw
        [ 1 2 3 4 ]
    .}
    {e,{e!}.N $0= {;;[]} {S~;} .? }:tw;


    .#? ::any ::list ::block.el\n  apply block to `any` and `i` for each element across list
    .{ Example:
        aya> "a" ["A" "B" "C"] {+}.el
        ["aA" "aB" "aC"]
    .}
    {@@.E@\L\@.&}:el;


    .#? ::list ::any ::block.le\n  apply block to `any` and `i` for each element across list
    .{ Example:
        aya> ["A" "B" "C"] "a" {+}.le
        ["Aa" "Ba" "Ca"]
    .}
    {@@\.E@\L@.&}:le;


    .#? ::block.haslocals\n  return true if the block has a local variables
    .# Both the args and the locals mush be empty for this to be false
    {.| :&.locals:E \.argsE + 0 =!}:haslocals;


    .#? ::block.locals\n  get the locals of a block\n  will throw error if block does not have locals
    {.|.locals}:locals;


    .#? ::block.args\n  get an ordered list of argument descriptions to the block\n  empty list if there are none
    {.|.args}:args;

    .#? ::block .use ::list\n  evaulate the variables (given by a list of symbols) in the block in the current scope
    .{ Example:
        aya> 2:y
        2
        aya> {x, x y *}.use[::y] :double
        {x , x 2 * }
        aya> 3 double
        6
    .}
    {(1 hold)({:d__,
        .# Create a dictionary of all values given by the list
        :{}:d__;
        :#{$~\d__:D;};
        .# Substitute the values from the dictionary into the block
        d__ .+
    })}:use;

    .#? ::block .time\n  return the result of the block and the execution time in ms
    {:a__, M$:a__; ~ M$ a__ -} :time;

    .# Utility Functions
    .#####################

    .#? ::block .op\n  return the block (allows use of (::sym or ::block) .op without type checking
    {}:op;

}
.# Merge with char metatable
{} .M \.+

.# Define operators
{.le}:otimes;
{.el}:odot;
