import ::string
import ::list

.#? SS readdlm\n  open a file, split into lines, split each line using dlm
{dlm::str, G dlm fromcsvstr}:readdlm;

.#? S opencsv\n  opens and parses a csv file into a matrix
{"," readdlm}:opencsv;

.#? S alterprompt\n  change the prompt
{1MZ}:alterprompt;

.#? ls\n  print a list of files in the working dir
{
  (""4MZ$#{"  "\+println0}E0=) then {
    "  <no files>" println
  }
}:ls;

.#? pwd\n  print the working dir
{""2MZprintln}:pwd;

.#? workingdir\n  get the working dir as a string
{""2MZ}:workingdir;

.#? cd S\n  change directory
{`({dir::str,
  if (dir "" =) {
    ""3MZ
  } {
    if (dir ".." =) {
      updir
    } {
      workingdir "$dir/" + 3MZ
    }
  }
  pwd
})}:cd;

.#? resetwd\n  reset working directory
{""3MZ}:resetwd;

.#? mkdir S\n  create a new directory
{`({dir::str,
  dir 5MZ
})}:mkdir;

.#? defaultwd\n  return the default working directory as a string
{:wd dflt,
  workingdir :wd;
  resetwd
  workingdir :dflt;
  wd 3 MZ
  dflt
}:defaultwd;


.#? more S\n  print a file to the console
{`({filename::str,
  filename G println
})}:more;

{
  workingdir filesep | B; filesep join filesep + 3MZ
}:updir;

.#? filesep\n  default directory separator (/ for unix, \\ for windows, etc)
if (defaultwd V '/ =\;) {
  "/" .# Unix
} {
  "\\" .# Windows
}
:filesep;


{,

  ::file :type;

  {file.open}:new;

  .#? S file.open\n  open a file and read its contents
  {path::str,
    {,
      workingdir path + :path
      "" :contents
      path :writename
    } file MO
  }:open;

  {self, "file: $(self.name)"}:show;

  .#? (file) file.close\n  free up memory from an opened file
  {self,
    "" self.:contents;
    "" self.:path;
  }:close;

  .#? (file) file.lines\n  return a list of lines of strings
  {self,
    self.contents "\n" |
  }:lines;

  .#? (file) file.name\n  the name of the file
  {self,
    self.path filesep |B\;
  }:name;

  .#? A (file) file.print\n  print the string representation of A to the file
  {a self,
    aP self.writename 1.G
    self.contents aP + self.:contents;
  }:print;

  .#? A (file) file.println\n  print the string representation of A to the file followed by a \\n
  {a self, aP"\n"+ self.print}:println;

}:file;
