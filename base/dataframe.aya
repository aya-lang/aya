import "list"
import "file"

{,

  {this, this.columns [1|~,.A]}:rows;

  {colnm::list rownm::list cols::list : numofrows,
    if (colsE0=) {
      0:numofrows;
    } {
      cols 0IE :numofrows;
    }
    "col title lengths do not macth" colsE colnmE =! conderr
    "row title lengths do not match numofrows: $numofrows, row headers: $(rownmE) " numofrows rownmE =! conderr
    "dataframe.new: all row lengths must be equal" cols {Enumofrows=}all! conderr
    {,
      colnm:colnames
      rownm:rownames
      cols:columns
      numofrows:numofrows
    } dataframe MO
  }:new;

  {[]__dataframe.new}:newempty;

  {self,
	  [""]self.colnamesKA
	  self.rownames #{P" |"K}
	  self.columns
	  [2|~,.A]K
	  matstr
  }:repr;

  {self, self.repr}:str;

  .# Row Indexing
  {name::str this : ix,
    this.rownames name N :ix;;
    "dataframe.rowbyname: unknown row name: $name" ix (-1) = conderr
    ix this.rowbyix
  }:rowbyname;

  {i:num this,
    "dataframe.rowbyix: invalid column number: $i" this.numofrowsV i < i0< | conderr
    this.rows i I
  }:rowbyix;

  {id this,
    [ id:T ::str = {id this.rowbyname} ?
      id:T ::num = {id this.rowbyix} ?
      {"dataframe.row: id must be a string or int. recieved: $id".D}
    ].S
  }:row;

  .# Column Indexing
  {name::str this : ix,
    this.colnames name N :ix;;
    "dataframe.colbyname: unknown column name: $name" ix (-1) = conderr
    ix this.colbyix
  }:colbyname;

  {i::num this,
    "dataframe.colbyix: invalid column number: $i" this.columnsEV i < i0< | conderr
    this.columns i I
  }:colbyix;

  {id this,
    [ id:T ::str = {id this.colbyname} ?
      id:T ::num = {id this.colbyix} ?
      {"dataframe.col: id must be a string or int. recieved: $id".D}
    ].S
  }:col;

  {colname::str init::num self,
    self.colnames colnameAK self.:colnames;
    self.columns init self.numofrows LAK self.:columns;
  }:addcol;

  {rowname::str init self,
    self.rownames rownameAK self.:rownames;
    self.columns #{initAK} self.:columns;
    self.numofrowsB self.:numofrows;
  }:addrow;

  {name self : ix,
    [
      name :T ::str = {
        self.colnames name N :ix;;
        "Invalid col name: $name" ix (-1) = conderr
        ix
      } ?
      name :T ::num = {name} ?
      {"Invalid colindex type. Received $name ($(name Mw))" .D}
    ].S
  }:colindex;

  {name self : ix,
    [
      name :T ::str = {
        self.rownames name N :ix;;
        "Invalid row name: $name" ix (-1) = conderr
        ix
      } ?
      name :T ::num = {name} ?
      {"Invalid rowindex type. Received $name ($(name Mw))" .D}
    ].S
  }:rowindex;

  {index::list self: r c rix cix,
    "Index must have two elements" indexE2=! conderr
    index 0I:r;
    index 1I:c;

    .# Get row index
    [
      r:T ::str = {r self.rowindex} ?
      r :T ::num = r ?
      (-1)
    ].S:rix;

    .# Get column index
    [
      c:T ::str = {c self.colindex} ?
      c :T ::num = c ?
      (-1)
    ].S:cix;

    .# Get data
    [
      rix(-1)= cix(-1)=! & {self.columns cix I} ? .# Entire column
      rix(-1)=! cix(-1)= & {self.columns#{rixI}} ? .# Entire row
      rix(-1)=! cix(-1)=! & {self.columns cix I rix I} ? .# Specific cell
      {"dataframe: invalid index. recieved $index"}
    ].S
  }:get;

  .#? SBB dataframe.opencsv\n  open a csv file and create a dataframe\n  BB = rowheaders, colheaders
  {path::str rowheader::num colheader::num : table rownames colnames rowcount colcount,
    path opencsv : table;

    .# If there are headers, subtract one from the count
    .# so that we do not include the headers themselves
    tableE colheader {V}{} .? : rowcount;
    table0IE rowheader {V}{} .? : colcount;

    .# Row names
    rowheader
    {table#{V\;P} colheader {V;}{} .? } .# if there are col headers, remove the first entry
    {[rowcount,P]} .# No headers in file, use a range of numbers
    .? :rownames;

    .# Column names
    colheader
    {table 0 I  tableV;; } .# Cols are the first row of the table
    {[colcount,P]} .# No names in file, use a range of numbers
    .? :colnames;

    .# Generate dataframe object
    colnames rownames [table~,.A] dataframe.new

  }:opencsv;

  {column self : i,
    column self.colindex :i;
    self.rows {iI} .$ [1|~,.A] self.:columns;
    self
  }:sort;

}:dataframe;

.# ["total" "percent"] ["a" "b"] [[10 15][40 60]] dataframe!:df
