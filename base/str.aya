.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# string.aya
.# Defines functions for working with strings and regular expressions

:{
    .# Import list variables
    [].M W


    {"\\s+" S E0=}:iswhitespace;

    .#? ::str.trim\n  remove whitespace from start and end of string
    {
        :& .iswhitespace {
            ; ""
        } {
            "^\\s+" S B\; "\\s+$" S V\; 
        } .?
    }:trim;


    .#? ::num ::char ::str .leftpad\n  left pad string S so it is at least length I using char C
    {len::num pad::char s,
        s.E len\- {pad\:J}\O
    }:lpad;


    .#? ICS.rightpad\n  right pad string S so it is at least length I using char C
    {len::num pad::char s,
        s.E len\- {pad:J}\O
    }:rpad;


    .# S.tolower\n  convert string to uppercase
    {:#{.upper}}:upper;


    .# S.toupper\n  convert string to lowercase
    {:#{.lower}}:lower;


    .#? S.isnum\n  returns true if the string is a valid number
    {.! :T ::num =}:isnum;


    .#? S.titlecase\n  convert a string to titlecase
    {s,
        s ERB; # {i,
            s.[iV] .iswhitespace {
                s.[i].upper s.:[i];
            } ?
        };
        s.[0].upper s.:[0];
        s
    }:titlecase;


    .#? S.lines\n  split a string into lines. ignore traling newlines
    {"\n"S}:lines;


    .#? S.bytes\n  convert string to byte list
    {:'}:bytes;


    .#? S.parsenum\n  If num, return num, else return str (rm surrounding quotes)
    {
        .!
        $:T ::str = {
            .# If it is a string, test if it has quotes and remove them
            .trim $ [0 -1]I "\"\"" = {B;V;} ?
        } ?
    }:parsenum;


    .#? sep S.readdlm\n  convert a csv string into a 2d list
    {sep s,
        sepP:sep;
        s.lines :# {
            sep S :# {.parsenum}
        }
        .makesquare
    }:readdlm;


    .#? ::str ::str .endswith\n  test if a string 1 ends with string 2
    {:&E@\.>=}:endswith;

    .#? ::str .rmquote\n  remove single leading/trailing quote characters if they exist
    .# aya> "A".rmquote
    .# "A"
    .# aya> "\"A\"".rmquote
    .# "A"
    .# aya> "\"A\"b".rmquote
    .# ""A"b"
    {s,
        {
            (s E 2 <) {
                s
            } (s.[-1] '" = s.[0] '" = &) {
                s $ \ ; B ; V ;
            } {
                s
            }
        } :?
    }:rmquote;

}


.# Merge with str metatable
"" .M \.+


