.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# math.aya
.# Essential math functions for Aya

import ::types
import ::list


.#############
.# Constants #
.#############


1M|:euler;    .#? euler: euler's constant e
0M|:pi;       .#? pi:  constant \{pi}
4M|:nan;      .#? nan:  not a number double literal
5M|:inf;      .#? inf:  infinity double literal
6M|:minf;     .#? minf:  minus infinity double literal
:1r4:fourth;  .# ¼
:1r2:half;	  .# ½

.#? phi: golden ratio (constant)
.# Compute phi using 2 adjacent fib numbers
[1000 _B, 1\0{_@+}@%;]_1I\0I/
:phi;




.########################
.# Vectorized Functions #
.########################


{.|}:abs;			.#? N abs\n  absolute value
{1 3/^}:cbrt;    	.#? N cbrt\n  cube root
{./}:ceil;      	.#? N ceil\n  ceiling
{pi*180/}:deg;    	.#? N deg\n  convert deg to rad (180° => 3.14..)
{180*pi/}:rad;      .#? N rad\n  convert rad to deg (pi rad => 180)
{Me}:exp;    	    .#? N exp\n  exp(x)
{M!}:fact;      	.#? N fact\n  factorial
{.\}:floor;      	.#? N floor\n  floor
{_.\-}:frac;    	.#? N frac\n  fractional part
{ML2ML/}:lg;		.#? N lg\n  base-2 log
{Ml}:ln;      		.#? N ln\n  natural log
{ML}:log;      		.#? N log\n  base-10 log
{%}:mod;            .#? N mod\n  modulo
{Mp}:primes;        .#? N primes\n  returns a list containing the primes up to and including N
{.!}:signnum;       .#? N signnum \n  returns the sign of a number (1,0,-1)
{Mq}:sqrt;          .#? N sqrt\n  square root
{.%}:div;			.#? <NN> div\n  integer division
{%}:rem;			.#? <NN> rem\n  remainder after division
{PE}:numofdigits;   .#? N numofdignts\n  number of digits in N

.# Binary vectorized functions
{2^\2^+Mq}:hypot;   .#? N hypot\n  hypotenuse function
{ML\ML\/}:logn;		.#? N logn\n  base-n log\n ex: log base 6 of 10 written as (10 6logn)




.###################
.# List Operations #
.###################

{_2^SMq/}:normal;   .#? L<N> normal\n  compute the normal vector of the given list
{{*}F}:product;     .#? L product\n  product of a list
{*S}:dot;           .#? LL dot\n  dot product of a list


.#? NN lcm\n least common multiple of two numbers or a list of numbers
{_ :T ::num = {.-}{{.-}F} .?}:lcm;

.#? NN gcd \n  greatest common divisor of 2 numbers or a list of numbers
{_ :T ::num = {.+}{{.+}F} .?}:gcd;

.#? L<N> cumsum\n  cumulative summation of a list
{list : sum outlist,
  .# Allocate output list
  0 listE L :outlist;

  list irange # {i,
    list iI sum + : sum;
    sum outlist i D
  };

  outlist
}:cumsum;

.#? L<N> cumprod\n  cumulative product of a list
{list : prod outlist,
  .# Initialize prod
  1:prod;

  .# Allocate output list
  0 listE L :outlist;

  list irange # {i,
    list iI prod * : prod;
    prod outlist i D
  };

  outlist
}:cumprod;






.################
.# Trigonometry #
.################

{Ms}:sin;                   .#? N sin \n  sine
{Mc}:cos;                   .#? N cos \n  cosine
{Mt}:tan;                   .#? N tan \n  tangent
{Ms1\/}:csc;                .#? N csc \n  cosecant
{Mc1\/}:sec;                .#? N sec \n  secant
{Mt1\/}:cot;                .#? N cot \n  cotangent

{MS}:asin;                  .#? N asin \n  inverse sine
{MC}:acos;                  .#? N acos \n  inverse cosine
{MT}:atan;                  .#? N atan \n  inverse tangent
{1\/MS}:acsc;               .#? N acsc \n  inverse cosecant
{1\/MC}:asec;               .#? N asec \n  inverse secant
{1\/MT}:acot;               .#? N acot \n  inverse cotangent

{_exp\Texp-2/}:sinh;        .#? N sinh \n  hyperbolic sine
{_exp\Texp+2/}:cosh;        .#? N cosh \n  hyperbolic cosine
{_sinh\cosh/}:tanh;         .#? N tanh \n  hyperbolic tangent
{sinh1\/}:csch;             .#? N csch \n  hyperbolic cosecant
{cosh1\/}:sech;             .#? N sech \n  hyperbolic secant
{tanh1\/}:coth;             .#? N coth \n  hyperbolic cotangent

{_2^1+Mq+Ml}:asinh;             .#? N asinh \n  inverse hyperbolic sine
{__1-Mq\1+Mq*+Ml}:acosh;        .#? N acosh \n  inverse hyperbolic cosine
{_1\+Ml\1\-Ml-0.5*}:atanh;      .#? N atanh \n  inverse hyperbolic tangent
{_1\/\2^1\/1+Mq+Ml}:acsch;      .#? N acsch \n  inverse hyperbolic cosecant
{1\/__1+Mq\1-Mq*+Ml}:asech;    	.#? N asech \n  inverse hyperbolic secant
{1\/_1\-Ml\1+Ml\-0.5*}:acoth;  	.#? N acoth \n  inverse hyperbolic cotangent



.##############
.# Statistics #
.##############

{_E\S\/}:mean;		.#? L mean\n  average of a list of numbers
{set : m, set mean:m; set#{m-2^}S setE /}:variance; .#? L variance\n  population variance
{variance Mq}:stdev; .#? L stdev\n  standard deviation

.#? L geomean \n  geometric mean
.# the nth root of the product of n numbers
{_E\{*}F1@/^}:geomean;

.#? L median \n  median value of a list
{l,
  l$_E2/.\               .# Sort the list and get its middle index
  lE2%0= {_1-KIS2/} {I}  .?  .# If the list has even length, average the middle two
                          .# The list has odd length, take the middle item
}:median;

.#? xL xL regression\n  return a block that evaluates to the regression of the sets
{x y :
  n a b
  sumy sumx
  sumxsq
  sumxytimes,

  xE:n;
  x2#^S:sumxsq;
  [x y,*]S:sumxytimes;
  xS:sumx;
  yS:sumy;


  sumy sumxsq *  sumx sumxytimes * -
  n sumxsq * sumx2^ -
  /:a;

  n sumxytimes * sumx sumy * -
  n sumxsq * sumx2^-
  /:b;

  "($b)*($a)+" .~
}:regression;


.#? LL pearson\n  pearson correlation coefficient between 2 datasets
{x y : n xs ys,
  xE:n;
  xS:xs;
  yS:ys;

  [x y,*]Sn* xs ys*-
   x2^Sn* xs2^ -
   y2^Sn* ys2^ -
   * Mq
  /
}:pearson;



.#############################
.# Additional Math Functions #
.#############################

.# Numerics
{E_@@*.\\/}:round; .#? NN round\n  round N1 to N2 decimal digits

.# BASE

{2 10 H}:unbit;   .#? L unbit \n  convert a list of bits to a number
{10 2 H}:bits;    .#? N bits \n  convert a positive number to a list of bits
{10 16 H}:hex;    .#? N hex\n  convert an int into a hex string
{16 10 H}:unhex;  .#? S unhex\n  convert a hex string to an int



.# COMBINATORICS

{G}:isprime;                   .#? N isprime \n  tests a number for primality
{n r, nM! n r-M!/}:npr;        .#? NN npr\n  permutations
{n r, nM! n r- M!/ rM!/}:bin;  .#? NN bin\n binomial (combinations)

.#? N divisors \n  returns a list of the numbers factors
{n, [1 n,, n\%0=]}:divisors;

.#? N factors\n  compute a number's prime factors
.# golf: {n,{2to(nV){n\%0=}.NI_n\/fK}{n}nGn2<|?}:f;
{n,
  .# is the number prime
  nG n2< |

  .# If the number is prime, return it
  {n}

  .# If the number is not prime, find the
  .#   next factor
  {
    .# Range from 2..ceil(sqrt(n))
    [2nVMq./]R

    .# Find the next factor
    {n\%0=}.N

    .# Append this factor to the list of
    .#   factors recursively
    I _n\/ factors K
  }

  .?
}:factors;





.#########
.# TESTS #
.#########

import ::test

`~ {:ts,

  "math" testset! :ts;

  {:1p1 4 round} [3.1415] ts+
  {0.00012345 5 round} [0.00012] ts+
  {9218731923.0012387087 4 round} [9218731923.0012 ] ts+
  {3.141 0 round} [3] ts+
  {[3 5][4 12] hypot} [[5 13]] ts+

  .# List operations
  {10R normal _S/S .\} [1] ts+
  {5R product} [120] ts+
  {[] product} [0] ts+
  {[1 2 3][4 5 6] dot} [32] ts+
  {12 4 lcm} [12] ts+
  {[120 45 3 5] lcm} [360] ts+
  {12 4 gcd} [4] ts+
  {[120 45 10 5] gcd} [5] ts+
  {[1 2 3 4] cumsum} [[1 3 6 10]] ts+
  {[1 2 3 4] cumprod} [[1 2 6 24]] ts+

  .# Statistics
  {10R mean} [5.5] ts+
  {10R variance} [8.25] ts+
  {[:5 5]R stdev 2 round} [3.16] ts+
  {10R geomean 2 round} [4.52] ts+
  {[1 6 3 4 7 8 3 2 2] median} [3] ts+
  {[ .25 .36 .44 .45 .5 ]  [ .3 .33 .4 .5 .51 ] regression 10\~ 3 round} [8.902]
  {10R _ pearson} [1] ts+
  {[ .25 .36 .44 .45 .5 ]  [ .3 .33 .4 .5 .51 ] pearson 3 round} [.902] ts+

  .# Other
  {12 bits} [[1 1 0 0]] ts+
  {[1 1 0 0] unbit} [12] ts+
  {98476 hex} ["180ac"] ts+
  {"180ac" unhex} [98476] ts+
  {100R #isprime S} [25] ts+
  {9 4 npr} [3024] ts+
  {9 4 bin} [126] ts+
  {5R _ bin S} [5] ts+
  {12 divisors} [[1 2 3 4 6 12]] ts+
  {12 factors} [[2 2 3]] ts+

  ts aya.addtest
}
