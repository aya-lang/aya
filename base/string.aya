.# string.aya
.# Defines functions for working with strings and regular expressions

import "char"
import "types"

.#? L S|C join\n  join a list of strings with another string or char
{l s, [l, s+]B;l(-1)IAKS}:join;

.#? S alldigits\n  tests if all chars in a string are digits
{_{isdigit}I=}:alldigits;

.#? S trim\n  remove whitespace from start and end of string
{"^\\s+|\\s+$" |S}:trim;

.#? SCI strleftpad\n  left pad string S so it is at least length I using char C
{strS padC lenN, str.E len\- {pad\K}\%}:strleftpad;

.#? SCI strrightpad\n  right pad string S so it is at least length I using char C
{strS padC lenN, str.E len\- {padK}\%}:strrightpad;

.#? S isnum\n  returns true if the string is a valid number
{.!'N isa}:isnum;

.#? S tocamel\n  convert a string with underscores to camel case
{str,
  for 'c ['a'z,] {
    "_$c" c! str .& :str;
  };
  str
}:tocamel;


.#? L<L> matstr\n  print a list of lists in matrix format
{
  [1|~,                 .# Transpose
    .A_#{PE} {.>}U BB    .# Calculate the maximum print width
    #{\P\.>}            .# Pad each entry with spaces on the left
  ][1|~,                .# Transpose
    .AS                 .# Combine strings
  ]'\n'join             .# Separate lines
}:matstr;


{str,
  str ERB; # {i,
    str iV I iswhitespace
    {str i :(str i I toupper)}
    ?
  };
  str 0:(str 0I toupper)
}:titlecase;

{:z,#{zB:z3%+}}:scramble;
{:z,#{zB:z3%-}}:descramble;






.# REGEX FUNCTIONS

{, .# begin regex module

.# Returns all URLs in a string
{"http[|s]://[^ |>|<]+"&}:geturls;

.# Return the first match of a regular expression
{&0I}:firstmatch;

.# Return the last match of a regular expression
{&1!I}:lastmatch;

.# Remove all matches of a regex in a string
{|S}:removeall;

.# Removes all spaces from a string
{"\\s+"|S}:trimall;

.# Returns true if the input string contains spaces or tabs
{_E\ "[\\t|\\s]" &E=!}:iswhitespace;

}:rgx;
