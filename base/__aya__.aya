.# This file is a part of aya: https://github.com/aya-lang/aya


.# __aya__
.# Defines the __aya__ namespace and keywords

.# NOTE: 12 letter variables ending in the letter 'z' are reserved for use in
.#       standard library. Such variables are used below.

{:(sys.ad) "test/test.aya" + :F}:tt;

.# Global __aya__ table
:{

    :{}:interpreter;

    .# If set to 1, all breakpoints will be ignored
    .#? __aya__.ignore_breakpoints\n  if true, skip all breakpoints
    0 :ignore_breakpoints;

}:__aya__;

:{
    :{ 
        ::__nil :__type__;
        "nil" :__str__;
        "nil" :__repr__'
        1 :__pushself__;
        {:T ::__nil =}:__eq__;
    }:__meta__;
}:nil;

.#######################################
.# DEFINE __aya__ KEYWORDS AND GLOBALS #
.#######################################

.# -----
.# DEBUG
.# -----

.#? bp\n  set a breakpoint
{ : __aya__^,
    __aya__.ignore_breakpoints ! {
        :(debug.pause)
    } ?
}:bp;


.# Hold operator (same as `)
.# 1 `+ 1
.# 1 (1 hold)+ 1
.# ``+ 1 1
.# (2 hold)+ 1 1
{__hold_n, {__hold_f : __hold_n^, {:__hold_f^, {~} O ~ __hold_f} __hold_n :` } 0 :` }:hold;

.# ----
.# LOAD
.# ----

.#? load S\n  Load a script
{{~".aya"+:F} 0 :`}:load;


.# -------
.# EXAMPLE
.# -------

{name,
    [:(sys.ad) :9s "examples" :9s name ".aya"] W :F
}:example;



.# -------
.# OPT_MOD
.# -------

.{
    Macro for creating a macro which runs a different block
    depending on whether or not a module is present as an argument

    .# Example:

    opt_mod (
        {block name mod,
            "with_mod!" :P [block.` name mod]
        }

        {block name,
            "no mod!":P [block.` name]
        }
    )

    aya> f :{} ::foo {"a"}
    with_mod!
    [ {"a"} ::foo :{} ]

    aya> f ::foo {"a"}
    no mod!
    [ {"a"} ::foo ]
.}

{with_mod no_mod,

    {:with_mod no_mod,

        .# Use constant substitution until var^ syntax is introduced
        _with_mod:with_mod;
        _no_mod:no_mod;

        .# Store functions on stack so they can be retrieved later
        :{
            no_mod.` :no_mod
            with_mod.` :with_mod
        }

        (3 hold)(
            .# Variable argument prefix operator
            .# aya> {mod name block, mod ::_fn =! {;} ? [mod name block.`]} :f

            .# Jump ahead 3 items
            .# aya> (```(\:&:T ::sym=! {\`}{\}.? f) ::_fn)   :{} ::foo {+}
            .# [ :{} ::foo {+} ]

            .# Jump ahead 2 items
            .# aya> (```(\:&:T ::sym=! {\`}{\}.? f) ::_fn)   ::foo {+}
            .# [ ::_fn ::foo {+} ]

            \:&:T ::sym=! {\(1 hold)}{\}.?


            ( {mod name obj : is_module with_mod no_mod,

                .# True if this function is being defined in a module
                .# fn foo::bar {...}
                .# False if defined in outer scope
                .# fn ::bar {...}
                mod ::_opt_mod =! :is_module;

                .# If a module was provided, remove the ::_opt_mod symbol from the stack
                is_module {;} ?

                W .# Capture with_mod and no_mod from outer dict

                .# Quote obj in case it is a block
                is_module {
                    obj.` name mod with_mod
                } {
                    obj.` name no_mod
                }
                .?
            } )

        )
        ::_opt_mod
    }

    .# Use constant substitution until var^ syntax is introduced
    :{ no_mod.`:_no_mod with_mod.`:_with_mod} .+

} __aya__.:opt_mod;


.# -----
.#  DEF
.# -----


.{
    `def` macro
    Universal verbose syntax for defining functions

    Define a function in the current scope:

        aya> def ::double {2*}
        aya> 3 double
        6

    Define a function in a module scope:

        aya> :{}:math;
        aya> def math::sq {2^}
        aya> 5 math.sq
        25

    Define a function in a class/struct scope:

        aya> struct point {x y}
        aya> def point::sum {self, self.x self.y +}
        aya> 2 3 point! :p
        ( 2 3 ) point!
        aya> p.sum
        5

    Define a function in a submodule:

        aya> :{ :{}:stats; }:math;
        aya> def (math.stats)::mean {.E\W\/}
        aya> [1 2 3 4] math.stats.mean
        2.5
.}

(
    {block name mod,
        block.` name mod :D ;
    }
    {block name,
        block.` name := ;
    }
) __aya__.opt_mod :def;


.# ----------------
.#  CLASS / STRUCT
.# ----------------


.#
.# `objcet`: Base object for class and struct
.#
:{
    {meta : instance,
        :{
            meta :__meta__;
            1 :__pushself__;
        } :instance;

        .# If it has a constructor call it
        instance ::__init__ H {
            instance.__init__
        } ?

        .# return the new object
        instance
    }:__new__;


    {self,
        "($(self.__type__:C) 0x$(self M# 10 16 .&))"
    }:__repr__;

    ::object:__type__;
    0 :__pushself__;

} __aya__.:object;


.#
.# `extend`: Keyword for extending a class
.#

{type::sym super,
    :{
        super:__meta__;
        type:__type__;
        .# copy new from super directly
        super.__new__.` :__new__;
        0:__pushself__;
    } type :=
} __aya__.:extend;

__aya__.extend.` :extend;


.#
.# `class`: Macro keyword for creating a default class that extends `object`
.#

{: extend^ object(__aya__.object),
    {:extend^ object^, ~:S~ object extend;} 1 :`
}:class;


.#
.# `super`: Macro keyword for accessing super variables
.#

{{
    ~:S~
    \:&.__meta__.__meta__@ :I\; ~
} 1 :` }:super;


.#
.# `struct`: Macro keyword for creating dataclasses
.#

{type__::sym members__::list super__ :
    extend__(extend.`)
    cls__,

    type__ super__ extend__ : cls__;

    .# __init__
    {self,
        .# grab all members from the stack
        num_members :A
        .# and assign them to self
        members {self :D} .&;
    } :{
        members__ E :num_members;
        members__   :members;
    } .+ cls__.:__init__;

    .# __str__/__repr__
    .# default string:
    .# ( m1 m2 ... mN ) type!
    {self,
        "( "
        members :# {self \:I \;} " " % +
        " ) " +
        name  +
        "!"+
    } :{
        type__ :C   :name;
        members__ :members;
    } .+ cls__.:__str__;

    cls__.__str__.` cls__.:__repr__;

    cls__
} __aya__.:_struct_impl;

{ : _struct_impl(__aya__._struct_impl.`) object(__aya__.object),
    { : _struct_impl^ , :&.[0]:S~ \.[1]~.*:#{:S~} object _struct_impl } 2 :`
}:struct;


.###########
.# CONTROL #
.###########


.#? if (B) E E\n  if statement:\n  if (bool value) {\n    then\n  } {\n    else\n  }
{(3 hold).?}:if;


.#? dowhile E E\n  evaluates E1 as long as E2 is true\n  always evaluates at least once
{(2 hold)({condition__ loop__,
    {loop__ condition__} W
})}:dowhile;


.#? while E E\n  evaluates E1 as long as E2 is true
{(2 hold)({condition__ loop__,
    condition__ {
        {loop__ condition__} W
    } ?
})}:while;

.#? A print\n  convert to string a print to console
{.P}:print;


.#? A println\n  convert to string and print to console on its own line
{:P}:println;


.{ Example:
    aya> with {"foo" file.dummyfile!} ::f {"File name is $(f.name)" :P}
    opened dummy file 'foo'
    File name is foo
    closed dummy file 'foo'
    aya> with {"foo" file.dummyfile!} ::f {"File name is $(f.name)" :P "Some error!".D }
    opened dummy file 'foo'
    File name is foo
    closed dummy file 'foo'
    Some error!
    stack:

    just before:
            {::f .Z .close} ~
.}
{(3 hold)(__aya__.with_ ~)}:with;


.#? ::any ::sym isa\n  returns true if the item's type matches the input
{item::any type::sym,
   type ::any = {
       1
   } {
       item type :@
   } .?
}:isa;


.# Helper function for `with` keyword which generates wrapper code
.{
    with {"foo.txt" file!} ::f {
      f.lines #:P
    }
{init::block var::sym code::block: try catch close,
    {init~ var := ; code~}.use[::init ::code ::var] :try ;
    {var.Z .close .D}.use[::var] :catch ;
    {var.Z .close}.use[::var] :close ;
    {try catch .K close~}.use[::try ::catch ::close]
    .setlocals[var]
}__aya__.:with_;
.}

.# val local:foo
{{
    .[0]:S.[0] .# extract symbol
    \:&@  .# duplicate the value so we can leave it on the stack
    :G.[-1] .# get local scope
    :D; .# assign
    .# val is left on the stack
}1:`} :local;

.################
.# import types #
.################

[
    "test"
    .# Type extensions
    "num"
    "char"
    "list"
    "str"
    "block"
    "sym"

    .# required libraries
    "importlib"

    .# Interpreter commands
    "interpreter"

] :# {f,
    .# "Loading base/$f..." :P
    load ([:(sys.ad) :9s "base/$f"]W)
};
