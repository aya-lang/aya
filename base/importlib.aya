:{} :importlib;

importlib __aya__.:importlib;

"""
# importlib

Defines two global keywords: import & require

## `import`

`import <module>`: import the module and assign it to the module name

### Example

Assume "sample.aya" has variables "foo" and "bar"

`import sample` will define the variable `sample` to the dict `:{ ...:foo ...:bar}`.
Use `sample.foo` & `sample.bar` to access imported names

### Valid import statements

  - Standard imports: Search for files in "<importlib._path>/<name>.aya"
    - import "example"
    - import "example.aya" (extension optional, no extension preferred)

  - Relative imports: Search for files relative to the file with the import statement
    - import ".relative"
    - import ".relative.aya" (extension optional, no extension preferred)
    - import ".src/relative.aya"

  - Package imports: If the import points to a directory, it will look for <path>/__pkg__.aya
    - import "src/package" (assumes src/package/__pkg__.aya exists)

  - Identifier imports: Itentifiers will be converted to strings before importing
    - import example (same as import "example")
    - import .example (ERROR: Will import "exmaple" not ".example")
    - Use with a SINGLE IDENTIFIER ONLY! Anything after the first identifier is treated as
      a nomal aya expression
      - import foo.bar (Parsed as {(import foo) .bar} )
      - import foo/bar (Parsed as {(import foo) / bar} )

  - Multiple imports: Wrap multiple imports in a block
    - import {foo bar}
    - import {example "./src/foo"} (same rules as above apply, can be an identifier or string)

## `require`

Require is similar to import but imports names directly into the current scope. 
You can specify which names to import or import all with a wildcard.
When using the wildcard, names with a leading underscore will not be imported

### Example

Assume "sample.aya" has variables "foo", "bar", and "_baz"

  - `require sample {foo}` will bring `foo` into the current scope. `sample` and `sample.bar` are undefined
  - `require sample {foo bar}` will bring `foo` and `bar` into the current scope
  - `require sample *` will bring `foo` and `bar` into the current scope. `_baz` will not be imported
    since it has a leading underscore
  - `require sample {foo _baz}` will bring `foo` and `_baz` into the current scope even though _baz has a leading underscore

### Valid require statements

 - Bring sin, cos, and tan into scope
   - require math {sin cos tan}
   - require ".math" {sin cos tan}
 - Like imports, strings and identifiers are interchangable (identifiers preferred when possible)
   - require "math" {"sin" "cos" "tan"}
   - require "./src/math" {"sin" "cos" "tan"}
 - Require * will bring all variables that do not start with a leading _ into scope
   - require math *
   - require "./src/math" *

""";


.#
.# Utility Functions
.#

.# Join paths a and b in a portable way
def importlib::_join_path {a::str b::str,
    a b :(sys.joinpath)
}

"a" "b"  importlib._join_path ["a" :9s "b"] W :!
"a/" "b" importlib._join_path ["a" :9s "b"] W :!


.#
.# Importlib Variables
.#

.# If true, allow printing debug information
def importlib::_debug 0

.# While processing an import, this will keep track of imports
.# inside of other imports. The top of the stack (.[-1]) is 
.# always the current file being imported
def importlib::_import_stack []

.# Dictionary of files which have been imported
.#  maps filename -> imported module (dict)
def importlib::_imported :{}

.# List of absolute paths to imported jar files
.# def importlib::loaded_jars []

.# List of locations where we are looking for files to import
.# Should always use get_path since it will append the current directory
.# By default, we add the standard library 
def importlib::_path [
    .# Standard library: "<aya-dir>/std"
    :(sys.ad) "std" importlib._join_path
    .# Default packages location: "<aya-dir>/pkg"
    :(sys.ad) "pkg" importlib._join_path
]


.#
.# Main API
.#


def importlib::import {__name::str : __path importlib^,
    __name importlib._resolve_name_to_path :__path;

    .# Special case, if the file is a jar, use library.load
    __path ".jar" importlib._endswith {
        __path :(library.load)
    } {

        .# Get the name of the identifier to assign to
        __path importlib._filename_no_extension .# str

        :& "__pkg__" = {
            ; .# pop "__pkg__"
            .# replace it with the package name
            __path :(sys.parent) importlib._filename_no_extension
        } ?

        __path importlib._load_file .# dict

        .# Assign the dict to the identifier
        \ := ;
    } .?
}

.# __symbols ::list|::num
.# if symbols is 1, then import all public names
def importlib::require {__name::str __symbols : importlib^,
    __name importlib._resolve_name_to_path importlib._load_file .# dict

    __symbols 1 = {
        .# require all names that don't start with "_"
        :# { \ :& :C .[0] '_ =! {:=} ? .A} ;
    } {
        .# require specified names
        __symbols importlib._bring_names_into_scope
    } .?
}

.#
.# Keywords
.#

.# keyword: import
.# See module documentation for valid import format
{{
    .[0] .# :` wraps args in a list; dump it to the stack
    __aya__.importlib._parse_identifiers :# {
        __aya__.importlib.import 
    };
} 1:` }:import;


.# keyword: require
.# See module documentation for valid import format
{{
    .# Args from :` come wrapped in a list; dump both to the stack
    ~
    .# require foo *
    .# bring all public names into scope
    .# Not really a better way to check this at the moment so we just
    .#   use string conversion
    :& P "{*}" = {
        ; 1
    } {
        __aya__.importlib._parse_identifiers :# {:S}  .# symbols
    } .?
    \
    __aya__.importlib._parse_identifiers.[0]      .# name
    \ __aya__.importlib.require
} 2:` }:require;


.#
.# Helper Functions
.#

.# stack args:
.#   dict
.#   list[symbol]
def importlib::_bring_names_into_scope { {$@\I\:=} :O ; }

:{ :{ 1:a 2:b 3:_c} [::a ::_c] importlib._bring_names_into_scope } :{ 1:a 3:_c } :!
:{ :{ 1:a 2:b 3:_c} [::a] importlib._bring_names_into_scope } :{ 1:a } :!
:{ :{ 1:a 2:b 3:_c} [] importlib._bring_names_into_scope } :{ } :!


def importlib::_log_debug {:importlib^,
     importlib._debug {"importlib: " \+ :P} {;} .?
}

.# Return the path with the current directory at the bottom
def importlib::get_path { : importlib^ ,
    importlib._path
    :(sys.wd)
    J
}

.# Get the filename with extensions removed
.# All extensions are removed
.# "/foo/bar/baz.aya" => "baz"
.# "/xyz/abc.def.ghi" => "abc"
def importlib::_filename_no_extension {path::str,
    path :(sys.get_filename) "\."S.[0]
}

"/foo/bar/baz.aya" importlib._filename_no_extension "baz" :!
"/xyz/abc.def.ghi" importlib._filename_no_extension "abc" :!


.# str::str suffix::str _endswith
.# "foo.aya" ".aya" _endswith => 1
def importlib::_endswith { :& E@\.>= }

"foo.aya" ".aya" importlib._endswith 1 :!
"foo.txt" ".aya" importlib._endswith 0 :!

.# Convert a name to a path
.# 
.# args:
.#   name::str : a valid import name
.#      - "example"
.#      - "example.aya"
.#      - ".relative"
.#      - ".relative.aya"
.#      - ".src/relative.aya"
.#      - "src/package" (assumes src/package/__pkg__.aya exists
.#
.# If a name has a leading "." resolve it to a path relative
.#   to the file currently being imported (not relative to the
.#   working dir)
.# Otherwise, search the importlib._path for locations the file could be
.# Check the following three files:
.#   - "_path/<name>" (an exact match)
.#   - "_path/<name>.aya" (append aya file extension)
.#   - "_path/<name>/__pkg__.aya" (package path)
.# 
.# Return the absolute path that was found. Only one path is returned
def importlib::_resolve_name_to_path {name::str : path_to_import importlib^ files_to_check valid_paths,
    .# Sanity check: make sure we didn't pass an empty path
    name "" = {"Empty import" .D} ?

    .# First we need to check if it is a relative import
    name.[0] '. = {: rel_path,
        .# If a path starts with a "." we need to join it with path
        .# from the top of the import stack
        .# If the import stack is empty, use working directory
        importlib._import_stack E 0 = {
            :(sys.wd)
        } {
            importlib._import_stack.[-1] :(sys.parent)
        } .?

        .# Drop the leading "." from 
        name.E 1- .>
        importlib._join_path :rel_path;

        [
            rel_path
            rel_path ".aya" +
            rel_path "__pkg__.aya" importlib._join_path
            rel_path ".aya" + "__pkg__.aya" importlib._join_path
        ] :files_to_check;

    } {
        .# If it is not a relative import, we need to search for it in the import path
        importlib.get_path :# {path_entry,
            path_entry name importlib._join_path :path_entry;
            path_entry .# regular name
            path_entry ".aya" + .# name.aya
            path_entry "__pkg__.aya" importlib._join_path .# package
            path_entry ".aya" + "__pkg__.aya" importlib._join_path .# .aya package
        } :files_to_check;
    } .?


    files_to_check :~ .[{:(sys.file_exists)}] :valid_paths;

    valid_paths E 1 > { "Import error: Multiple valid paths found for import: $valid_paths" .D } ?
    valid_paths E 0 = { "Import error: Unable to find any files in path: $files_to_check" .D} ?

    .# Exactly 1 file exists, that is the path to import
    valid_paths.[0] :path_to_import;

    .# Now that we have the path to import, lets load it
    path_to_import :(sys.abspath) .# importlib._load_file :imported;
}


.# Import a file
.# args:
.#   - path_to_import::str : The resolved absolute path to the aya file
.#
.# return: the imported file as a dict
def importlib::_load_file {path_to_import::str : importlib^,
    .# Have we imported this already?
    importlib._imported path_to_import H {
        .# If we've already imported the file, just return the dict
        importlib._imported.[path_to_import]
    } {
        .# if the path is already in the import stack, we are in a cycle
        importlib._import_stack path_to_import H {
            [
                "Import cycle detected when importing $path_to_import"
                "Import stack:"
                importlib._import_stack~
            ] "\n" % .D
        } ?

        .# Push the path we are importing onto the import stack
        path_to_import importlib._import_stack .B;

        {
            .# Open a new scope
            :{
                0 :__main__;

                .# Load the file
                path_to_import :F
            }
            .# Now that import is complete, remove __main__
            ::__main__ .-
        } {ex,
            .# There was an error importing
            .# pop from the import stack
            importlib._import_stack B;;
            ex .D .# re throw error
        } .K

        .# pop from the import stack
        importlib._import_stack B;;

        .# Add dict to imported cache
        :& .# Keep dict on the stack
        importlib._imported.:[path_to_import];
    } .?

    .# the imported dict is left on the stack
}

.# A file is main if `__main__` is undefined or not 0
def importlib::is_main {
    { .# try
        __main__ 0 =!
    } {;
        1
    } .K
}

def ::main {{
    ~ __aya__.importlib.is_main {~} ?
} 1 :`}


.# Convert a block containing symbols or strings to a list of strings
def importlib::_block_to_str_list {b::block,
    b.` .* :# {x,
        x.` :S .E 1= {
            .# If it is a symbol it will be converted to [::symbol]
            .# Use .[0] to get the symbol object
            .[0] :C
        } {
            .# If it is not a symbol it will be converted to []
            .# evaluate the block x to get the original string
            ; x
        }.?
    }
}

.# Tests
{sin cos "Asin" "Acos"} importlib._block_to_str_list
    [ "sin" "cos" "Asin" "Acos" ] :!

.# Convert a block containing symbols or strings to a list of symbols
.# aya> {sin cos "Asin" "Acos"} .* :# {x, x.` :S .E 1= {~:C} {; x.`~}.? :S}
.# [ ::sin ::cos ::"Asin" ::"Acos" ]
def importlib::_block_to_symbol_list {:importlib^,
    importlib._block_to_str_list #:S

}

.# Tests
{sin cos "Asin" "Acos"} importlib._block_to_symbol_list
    [ ::sin ::cos ::"Asin" ::"Acos" ] :!


.# stack args:
.#  list[block[str|identifier]]
def importlib::_parse_identifiers {
    importlib._block_to_str_list

    .# If still a block, we need to parse one level deeper
    .# We do not handle any additional nested blocks
    :&.[0] block :@ {
        .[0] .* :#{
            importlib._block_to_str_list.[0]
        }
    } ?
}

{foo} importlib._parse_identifiers
    [ "foo" ] :!
{foo bar} importlib._parse_identifiers
    [ "foo" "bar" ] :!
{foo "baz"} importlib._parse_identifiers
    [ "foo" "baz" ] :!
{foo "baz" "./src/foo.txt"} importlib._parse_identifiers
    [ "foo" "baz" "./src/foo.txt" ] :!
{"./src/foo.txt"} importlib._parse_identifiers
    [ "./src/foo.txt" ] :!


def importlib::load_library {jar_file : importlib^,
    importlib.loaded_jars jar_file H ! {
        jar_file :(library.load) ;
        jar_file importlib.loaded_jars .B ;
    } ?
}

importlib __aya__.:importlib;
